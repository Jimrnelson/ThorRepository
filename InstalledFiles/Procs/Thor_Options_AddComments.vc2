*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="thor_options_addcomments.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS clsaddcomments AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Baselabel1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Line1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Basecheckbox1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label3" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*p: cthortool
		*p: othor
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	*<PropValue>
		Anchor = 15
		cthortool = 
		Height = 260
		Name = "clsaddcomments"
		othor = .NULL.
		Width = 345
		_memberdata = <VFPData>
			<memberdata name="othor" display="oThor"/>
			<memberdata name="cthortool" display="cThorTool"/>
		</VFPData>
	*</PropValue>

	ADD OBJECT 'Basecheckbox1' AS checkbox WITH ;
		Alignment = 0, ;
		AutoSize = .F., ;
		Caption = 'Use tool "Comment Highlighted Text" as a toggle? That is, if the highlighted text is already commented, remove the comments?', ;
		Height = 45, ;
		Left = 17, ;
		Name = "Basecheckbox1", ;
		Top = 144, ;
		Width = 299, ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'Baselabel1' AS label WITH ;
		Alignment = 2, ;
		Caption = "Comment Highlighted Text", ;
		FontBold = .T., ;
		ForeColor = 0,0,255, ;
		Height = 18, ;
		Left = 5, ;
		Name = "Baselabel1", ;
		TabIndex = 7, ;
		Top = 6, ;
		Width = 335
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label2' AS label WITH ;
		Caption = "Text to be inserted as a new line before the first highlighted line. Passed as a parameter to TextMerge. Must begin with unique text so that it can be removed when un-commenting.", ;
		Height = 65, ;
		Left = 10, ;
		Name = "Label2", ;
		Top = 36, ;
		Width = 322, ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label3' AS label WITH ;
		Alignment = 0, ;
		BackStyle = 0, ;
		Caption = "This class is now obsolete. The options for this tool are handled by a class definition in the tool itself, using newer class OptionRenderEngine that allows the class for changing options to be defined simply in code.", ;
		FontBold = .T., ;
		ForeColor = 255,0,0, ;
		Height = 108, ;
		Left = 24, ;
		Name = "Label3", ;
		TabIndex = 7, ;
		Top = 92, ;
		Width = 299, ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Line1' AS line WITH ;
		Anchor = 10, ;
		Height = 0, ;
		Left = 0, ;
		Name = "Line1", ;
		Top = 26, ;
		Width = 380
		*< END OBJECT: BaseClass="line" />

	ADD OBJECT 'Text1' AS textbox WITH ;
		FontName = "Courier New", ;
		Height = 23, ;
		Left = 6, ;
		Name = "Text1", ;
		Top = 105, ;
		Width = 323
		*< END OBJECT: BaseClass="textbox" />
	
	PROCEDURE Init
		This.SetAll ('FontSize', This.Parent.GetOption ('FontSize'))
		This.oThor = ExecScript(_Screen.cThorDispatcher, "Thor Engine=")
		This.cThorTool = 'Resize Designer Window'
	ENDPROC

	PROCEDURE Basecheckbox1.InteractiveChange
		This.Parent.Parent.SetOption('Toggle Comments', 'Comment Highlighted Text', This.Value)
	ENDPROC

	PROCEDURE Basecheckbox1.Refresh
		This.Value = This.Parent.Parent.GetOption('Toggle Comments', 'Comment Highlighted Text')
	ENDPROC

	PROCEDURE Text1.InteractiveChange
		This.Parent.Parent.SetOption('Comment Highlighted Text', 'Comment Highlighted Text', Alltrim(This.Value)) 
	ENDPROC

	PROCEDURE Text1.Refresh
		This.Value = This.Parent.Parent.GetOption('Comment Highlighted Text', 'Comment Highlighted Text')
	ENDPROC

ENDDEFINE
