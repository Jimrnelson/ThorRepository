*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="thor_proc_contextmenu.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS contextmenu AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: activate		&& Occurs when a FormSet, Form, or Page object becomes active or when a ToolBar object is shown.
		*m: addmenuitem		&& Adds a new item to a ComboBox or ListBox control, optionally allowing you to specify the item's index.
		*m: addsubmenu
		*m: calculateshortcutmenuposition
		*m: createcontextmenu
		*m: endsubmenu
		*m: pix2fox
		*m: releasepopups
		*m: setdatasession
		*p: cmenuname
		*p: keyword
		*p: llastitemempty
		*p: nchoice
		*p: nchoices
		*p: ncurrentlevel
		*p: nhandle
		*p: nmenubar
		*p: parameters
		*p: prompt
		*a: aallmenunames[1,0]
		*a: abarcounts[1,0]
		*a: achoices[1,0]
		*a: amenunames[1,0]
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	*<PropValue>
		cmenuname = 
		keyword = .F.
		llastitemempty = .F.
		Name = "contextmenu"
		nchoice = 0
		nchoices = 0
		ncurrentlevel = 1
		nhandle = 0
		nmenubar = 0
		parameters = .F.
		prompt = 
		_memberdata = <VFPData>
			<memberdata name="ncurrentlevel" display="nCurrentLevel"/>
			<memberdata name="abarcounts" display="aBarCounts"/>
			<memberdata name="amenunames" display="aMenuNames"/>
			<memberdata name="nchoices" display="nChoices"/>
			<memberdata name="activate" display="Activate"/>
			<memberdata name="nchoice" display="nChoice"/>
			<memberdata name="keyword" display="Keyword"/>
			<memberdata name="parameters" display="Parameters"/>
			<memberdata name="createcontextmenu" display="CreateContextMenu"/>
			<memberdata name="calculateshortcutmenuposition" display="CalculateShortcutMenuPosition"/>
			<memberdata name="pix2fox" display="Pix2Fox"/>
			<memberdata name="addmenuitem" display="AddMenuItem"/>
			<memberdata name="addsubmenu" display="AddSubMenu"/>
			<memberdata name="endsubmenu" display="EndSubMenu"/>
			<memberdata name="addmenuitemx" display="AddMenuItemX"/>
			<memberdata name="setdatasession" display="SetDataSession"/>
			<memberdata name="init" display="Init"/>
			<memberdata name="addobject" display="AddObject"/>
			<memberdata name="addproperty" display="AddProperty"/>
			<memberdata name="destroy" display="Destroy"/>
			<memberdata name="error" display="Error"/>
			<memberdata name="newobject" display="Newobject"/>
			<memberdata name="readexpression" display="ReadExpression"/>
			<memberdata name="readmethod" display="ReadMethod"/>
			<memberdata name="removeobject" display="RemoveObject"/>
			<memberdata name="resettodefault" display="ResetToDefault"/>
			<memberdata name="saveasclass" display="SaveAsClass"/>
			<memberdata name="showwhatsthis" display="ShowWhatsThis"/>
			<memberdata name="writeexpression" display="WriteExpression"/>
			<memberdata name="writemethod" display="WriteMethod"/>
			<memberdata name="height" display="Height"/>
			<memberdata name="width" display="Width"/>
			<memberdata name="comment" display="Comment"/>
			<memberdata name="helpcontextid" display="HelpContextID"/>
			<memberdata name="picture" display="Picture"/>
			<memberdata name="tag" display="Tag"/>
			<memberdata name="whatsthishelpid" display="WhatsThisHelpID"/>
			<memberdata name="_memberdata" display="_MemberData"/>
			<memberdata name="aallmenunames" display="aAllMenuNames"/>
			<memberdata name="achoices" display="aChoices"/>
			<memberdata name="nhandle" display="nHandle"/>
			<memberdata name="cmenuname" display="cMenuName"/>
			<memberdata name="nmenubar" display="nMenuBar"/>
			<memberdata name="releasepopups" display="ReleasePopups"/>
			<memberdata name="llastitemempty" display="lLastItemEmpty"/>
			<memberdata name="prompt" display="Prompt"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE activate		&& Occurs when a FormSet, Form, or Page object becomes active or when a ToolBar object is shown.
		Local lcMenu, lcParameters, lcPrompt, lnChoice
		
		If This.nChoices = 0
			Messagebox ('This menu is empty; no menu items found!', 16, 'Menu is empty', 0)
			This.ReleasePopups()
			Return
		Endif
		
		lnChoice = 0
		lcMenu	 = This.aMenuNames(1)
		Activate Popup &lcMenu
		
		This.ReleasePopups()
		
		If m.lnChoice > 0
			This.nChoice	= m.lnChoice
			This.KeyWord	= This.aChoices (m.lnChoice, 1)
			This.Parameters	= This.aChoices (m.lnChoice, 2)
			This.Prompt		= This.aChoices (m.lnChoice, 3)
		
			lcPrompt	 = Strtran(This.Prompt, '\<', '')
			lcParameters = Trim(Transform(This.Parameters))
		
			SaveSessionLog(m.lcPrompt + ' == ' + m.lcParameters)
			LogEvent('   Context menu selection: ' + m.lcPrompt + ' => ' + m.lcParameters)
		
			Return .T.
		Else
			Return .F.
		Endif
		
	ENDPROC

	PROCEDURE addmenuitem		&& Adds a new item to a ComboBox or ListBox control, optionally allowing you to specify the item's index.
		Lparameters lcPrompt, lcExec, lcStatusBar, lcKeyStroke, lcKeyWord, lxParameters, lcMarked, lcStyle
		
		Local lcEx, lcMenuName, lnBar, lnCurrentLevel
		
		With This
			lnCurrentLevel = .nCurrentLevel
			lnBar		   = .aBarCounts (lnCurrentLevel) + 1
		Endwith
		
		Do Case
			Case Not Empty (lcPrompt)
				This.lLastItemEmpty = .F.
			Case lnBar = 1 Or This.lLastItemEmpty
				Return
			Otherwise
				This.lLastItemEmpty = .T.
		Endcase
		
		With This
			lcMenuName	   = .aMenuNames (lnCurrentLevel)
		
			.aBarCounts (lnCurrentLevel) = lnBar
		
			.nChoices = .nChoices + 1
			Dimension .aChoices (.nChoices, 4)
			.aChoices (.nChoices, 1) = Evl (lcKeyWord, lcPrompt)
			.aChoices (.nChoices, 2) = lxParameters
			.aChoices (.nChoices, 3) = Evl (lcPrompt, '')
			.aChoices (.nChoices, 4) = Evl (lcExec, '')
			If Empty (lcExec)
				lcExec = 'lnChoice = ' + Transform (.nChoices)
			Endif
		
		Endwith
		
		lcPrompt	= Evl (lcPrompt, '\-')
		lcStatusBar	= Evl (lcStatusBar, '')
		lcStyle	= Evl (lcStyle, '')
		
		If Empty (lcKeyStroke)
			Define Bar (lnBar) Of (lcMenuName) Prompt lcPrompt Message lcStatusBar Style lcStyle
		Else
			Define Bar (lnBar) Of (lcMenuName) Prompt lcPrompt Key Alt+F12, lcKeyStroke Message lcStatusBar Style lcStyle 
		Endif
		
		If Not Empty (lcExec)
			On Selection Bar (lnBar) Of (lcMenuName) &lcExec
		Endif
		
		If Not Empty(lcMarked)
			lcEx = 'SET MARK OF Bar (lnBar) OF ' + lcMenuName + ' TO ' + Transform(lcMarked)
			&lcEx
		Endif
		
		With This
			.cMenuName = lcMenuName
			.nMenuBar  = lnBar
		Endwith
	ENDPROC

	PROCEDURE addsubmenu
		Lparameters lcPrompt, lcStatusBar, lcKeyStroke
		Local lcMenuName, lcPopupName, lcSkip, lnBar, lnCurrentLevel
		
		With This
			lnCurrentLevel = .nCurrentLevel
		
			lcPopupName = 'Menu' + Sys(2015)
			Define Popup &lcPopupName SHORTCUT Relative
		
			lnBar		   = .aBarCounts (lnCurrentLevel) + 1
			lcMenuName	   = .aMenuNames (lnCurrentLevel)
			.aBarCounts (lnCurrentLevel) = lnBar
			lcStatusBar = Evl(lcStatusBar, '')
		
			If Empty (lcKeyStroke)
				Define Bar (lnBar) Of (lcMenuName) Prompt lcPrompt Message lcStatusBar
			Else
				Define Bar (lnBar) Of (lcMenuName) Prompt lcPrompt Key Alt+F12, lcKeyStroke Message lcStatusBar
			Endif
		
			On Bar (lnBar) Of (lcMenuName) Activate Popup &lcPopupName
		
			****************************************************************
		
			lnCurrentLevel = lnCurrentLevel + 1
			.nCurrentLevel = lnCurrentLevel
		
			Dimension .aBarCounts(lnCurrentLevel)
			.aBarCounts(lnCurrentLevel) = 0
		
			Dimension .aMenuNames(lnCurrentLevel)
			.aMenuNames(lnCurrentLevel) = lcPopupName
		
			Dimension .aAllMenuNames(1 + Alen(.aAllMenuNames))
			.aAllMenuNames(Alen(.aAllMenuNames)) = lcMenuName
		
			.lLastItemEmpty = .F.
		
		Endwith
		
		
	ENDPROC

	PROCEDURE calculateshortcutmenuposition
		Local lcPoint, lnSMCol, lnSMRow, loResult, loWas
		
		*!* * Removed 6/18/2012 / JRN
		*!* loWas = Newobject ('WinApiSupport', 'PEME_WinApiSupport.PRG')
		Declare Long GetCursorPos In WIN32API String @lpPoint
		Declare Long ScreenToClient In WIN32API Long HWnd, String @lpPoint
		
		lcPoint = Replicate (Chr(0), 8)
		&& Get mouse location in Windows desktop coordinates (pixels)
		= GetCursorPos (@lcPoint)
		&& Convert to VFP Desktop (_Screen) coordinates
		= ScreenToClient (_Screen.HWnd, @lcPoint)
		&& Covert the coordinates to foxels
		
		lnSMCol	= This.Pix2Fox (loWas.Long2Num (Left (lcPoint, 4)), .F., _Screen.FontName, _Screen.FontSize)
		lnSMRow	= This.Pix2Fox (loWas.Long2Num (Right (lcPoint, 4)), .T., _Screen.FontName, _Screen.FontSize)
		
		loResult = Createobject ('Empty')
		AddProperty (loResult, 'Column', lnSMCol )
		AddProperty (loResult, 'Row', lnSMRow )
		Return loResult
		
	ENDPROC

	PROCEDURE createcontextmenu
		Lparameters lcMenuName, llAlignToMouse
		Local lnHandle, loEditorWin, loPosition, loPositionMouse
		
			Define Popup (lcMenuName)  ;
				shortcut			   ;
				Relative			   ;
				From Mrow(), Mcol()
		
		Return
		
		
	ENDPROC

	PROCEDURE endsubmenu
		Lparameters lcPrompt
		Local lnBarCount, lcMenuName, lnCurrentLevel
		
		With This
			lnCurrentLevel = .nCurrentLevel
			lnBarCount	   = .aBarCounts(lnCurrentLevel)
			If lnCurrentLevel > 1
		
				lnCurrentLevel = lnCurrentLevel - 1
				.nCurrentLevel = lnCurrentLevel
		
				Dimension .aBarCounts(lnCurrentLevel)
				Dimension .aMenuNames(lnCurrentLevel)
		
				If lnBarCount = 0
					lcMenuName = .aMenuNames (lnCurrentLevel)
					Release Bar (.aBarCounts(lnCurrentLevel)) Of &lcMenuName
					.aBarCounts(lnCurrentLevel) = .aBarCounts(lnCurrentLevel) - 1
				Endif
			Endif
		
		Endwith
		
	ENDPROC

	PROCEDURE Init
		Lparameters lcMenuName, lnStartBar, llAlignToMouse
		
		With This
			.aBarCounts(1) 	  = Evl(lnStartBar, 0)
		
			If Empty (lcMenuName)
				lcMenuName = 'Menu' + Sys(2015)
				.CreateContextMenu (lcMenuName, llAlignToMouse)
			Endif
		
			.aMenuNames(1) 	  = lcMenuName
			.aAllMenuNames(1) = lcMenuName
		
		Endwith
		
		
	ENDPROC

	PROCEDURE pix2fox
		LPARAMETER tnPixels, tlVertical, tcFontName, tnFontSize
		&& tnPixels - pixels to convert
		&& tlVertical - .F./.T. convert horizontal/vertical coordinates
		&& tcFontName, tnFontSize - use specified font/size 
		&&         or current form (active output window) font/size, if not specified 
		LOCAL lnFoxels
		 
		IF PCOUNT() > 2
			lnFoxels = tnPixels/FONTMETRIC(IIF(tlVertical, 1, 6), tcFontName, tnFontSize)
		ELSE
			lnFoxels = tnPixels/FONTMETRIC(IIF(tlVertical, 1, 6))
		ENDIF	
		 
		RETURN lnFoxels
	ENDPROC

	PROCEDURE releasepopups
		Local lcMenu, lnI
		For lnI = 1 To Alen (This.aAllMenuNames)
			lcMenu = This.aAllMenuNames (lnI)
			Release Popups &lcMenu
		Endfor
		
		
	ENDPROC

	PROCEDURE setdatasession
		Lparameters tnDataSession
		
		Set Datasession to (tnDataSession)
	ENDPROC

ENDDEFINE
