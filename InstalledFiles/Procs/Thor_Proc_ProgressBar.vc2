*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="thor_proc_progressbar.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS _gofish AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*p: cappname
		*p: capppath
		*p: cbuilddate
		*p: cversion
		*p: oresultsform
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	*<PropValue>
		cappname = 
		capppath = 
		cbuilddate = 
		cversion = 
		Name = "_gofish"
		oresultsform = .NULL.
		_memberdata = <VFPData>
			<memberdata name="cappname" display="cAppName"/>
			<memberdata name="capppath" display="cAppPath"/>
			<memberdata name="cversion" display="cVersion"/>
			<memberdata name="oresultsform" display="oResultsForm"/>
			<memberdata name="cbuilddate" display="cBuildDate"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE Destroy
		This.oResultsForm = .null.
	ENDPROC

ENDDEFINE

DEFINE CLASS gf_baseform AS form 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: copyobjectproperties
		*m: loadformsettings
		*m: saveformsettings
		*p: cuisettingsfile
		*p: oform
		*p: omy
		*p: osearchengine
		*p: osearchoptions
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	*<PropValue>
		Caption = "GoFish"
		cuisettingsfile = 
		Desktop = .T.
		DoCreate = .T.
		Height = 325
		Left = 0
		Name = "gf_baseform"
		oform = .NULL.
		omy = .NULL.
		osearchengine = .NULL.
		osearchoptions = .NULL.
		Top = 0
		Width = 662
		_memberdata = <VFPData>
			<memberdata name="loadformsettings" display="LoadFormSettings"/>
			<memberdata name="cuisettingsfile" display="cUISettingsFile"/>
			<memberdata name="saveformsettings" display="SaveFormSettings"/>
			<memberdata name="oform" display="oForm"/>
			<memberdata name="osearchengine" display="oSearchEngine"/>
			<memberdata name="osearchoptions" display="oSearchOptions"/>
			<memberdata name="omy" display="oMy"/>
			<memberdata name="copyobjectproperties" display="CopyObjectProperties"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE Activate
		Set Talk Off && Just in case user has turn this on somehow or accidentally
		Set Echo Off
		Set Exact On
		Set Deleted Off
	ENDPROC

	PROCEDURE copyobjectproperties
		Lparameters toSourceObject, toNewObject
		*-- Adapted from: http://www.berezniker.com/content/pages/visual-foxpro/shallow-copy-object
		
		Local laProps[1], lcPropName, lnI
		
		For lnI = 1 To Amembers(laProps, toSourceObject, 0, 'U')
		    lcPropName = Lower(laProps[lnI])
		    If Type([toSourceObject.] + lcPropName ,1) = 'A'
		        AddProperty(toNewObject, lcPropName + '[1]', Null )
		        = Acopy(toSourceObject.&lcPropName, loNewObject.&lcPropName)
		    Else
		        AddProperty(toNewObject, lcPropName, Evaluate('toSourceObject.' + lcPropName) )
		    Endif
		Endfor
		
		Return toNewObject
		
	ENDPROC

	PROCEDURE Destroy
		DoDefault()
		
		This.SaveFormSettings()
		
		*This.oForm = .null.
		
	ENDPROC

	PROCEDURE Init
		Lparameters toForm
		
		Thisform.cUISettingsFile = Addbs(Home(7)) + Strtran(This.Name, ' ', '_') + '_Form_Settings.xml'
		
		This.LoadFormSettings()
		
		This.oForm = toForm
		
		If Vartype(toForm) = 'O'
			This.oSearchEngine = toForm.oSearchEngine
			This.oSearchOptions = toForm.oSearchEngine.oSearchOptions
		Endif
		
	ENDPROC

	PROCEDURE Load
		Set Talk Off
		Set Echo Off
		
		DoDefault()
		
	ENDPROC

	PROCEDURE loadformsettings
		Local loMy as 'My' OF 'My.vcx'
		Local lcFile, loSettings
		
		lcFile = This.cUISettingsFile
		
		loMy = Newobject('My', 'My.vcx')
		loSettings = loMy.Settings
		
		Thisform.oMy = loMy
		
		If !File(lcFile)
			return
		Endif
		
		loSettings.Load(lcFile)
		
		*-- Resize form size and position--------------------
		If loSettings.Exists('FormTop')
			With loSettings
				This.Top    = .FormTop
				This.Left   = .FormLeft
				This.Height = .FormHeight
				This.Width  = .FormWidth
			EndWith
			
			This.Resize()
		EndIf
		
		
		
		  
	ENDPROC

	PROCEDURE LostFocus
		Activate Screen
	ENDPROC

	PROCEDURE saveformsettings
		Local lcFile, loSettings
		
		loSettings = Thisform.oMy.Settings
		
		lcFile = This.cUISettingsFile
		
		With loSettings
			*-- Form Size and Position -----------------------------
			.Add('FormTop',    This.Top)
			.Add('FormLeft',   This.Left)
			.Add('FormHeight', This.Height)
			.Add('FormWidth',  This.Width)
		
			.Save(lcFile)
		
		Endwith
		
		
		
		
		  
	ENDPROC

ENDDEFINE

DEFINE CLASS gf_combosearchexpressionhistory AS combobox 
 	*< CLASSDATA: Baseclass="combobox" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: loadrows
		*m: opentable
		*m: savesearchexpression
		*p: ctable
		*p: nexpressionstostore
		*p: nmaxmru
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	*<PropValue>
		Anchor = 10
		ctable = 
		Height = 24
		Name = "gf_combosearchexpressionhistory"
		nexpressionstostore = 15
		nmaxmru = 7
		Visible = .F.
		Width = 100
		_memberdata = <VFPData>
			<memberdata name="nexpressionstostore" display="nExpressionsToStore"/>
			<memberdata name="opentable" display="OpenTable"/>
			<memberdata name="loadrows" display="LoadRows"/>
			<memberdata name="ctable" display="cTable"/>
			<memberdata name="savesearchexpression" display="SaveSearchExpression"/>
			<memberdata name="nmaxmru" display="nMaxMRU"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE Click
		This.Visible = .F.
		
		With This.Parent.editSearch
			.Value = Rtrim(This.Value)
			.SetFocus()
			.SelStart = 999
		Endwith
		
		lcValue = This.value
		This.SaveSearchExpression(This.Value) && Will move this entry to the top of the list
		This.Value = Alltrim(lcValue)
		
		
	ENDPROC

	PROCEDURE Init
		this.Top = this.Parent.editSearch.top
		
		This.cTable = Addbs(Home(7)) + 'GF_Search_Expression_History.dbf'
		
		This.LoadRows()
		
		
		
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		If nKeyCode = 27 && ESC Key
			this.Tag = 'ESCAPE'
			this.Visible = .f.
			This.Parent.editSearch.SetFocus()
			This.Parent.editSearch.SelStart = 999
			This.Parent.editSearch.SelLength = 1
			NoDefault 
		EndIf
		
		
		
	ENDPROC

	PROCEDURE loadrows
		Local lItemExists, lcItem, lnSelect, lnCounter
		
		lnCounter = 0
		
		lnSelect = Select()
		
		This.OpenTable()
		
		*-- Rebuild the combobox values -------------------------------
		This.RowSource = '' && Clear out rows
		
		Scan
		
			lcItem = Alltrim(Lower(expression))
			lItemExists = .F. && assume the value isn't in the list.
		
			For i = 1 To This.ListCount
				If Alltrim(Lower(This.List(i))) == lcItem
					lItemExists = .T.
					Exit
				Endif
			Endfor
		
			If !lItemExists
				This.AddItem(lcItem)
				lnCounter = lnCounter + 1
				If lnCounter = This.nMaxMRU
					Exit
				Endif
			Endif
		Endscan
		
		Use
		
		This.Refresh()
		
		Select (lnSelect)  
	ENDPROC

	PROCEDURE LostFocus
		this.Visible = .f.
		
	ENDPROC

	PROCEDURE opentable
		Local lcCursor, lcFilter, lcScope, lcSearchExpressionTable, lnExpressionsToStore
		
		lcSearchExpressionTable = This.cTable
		lnExpressionsToStore = This.nExpressionsToStore
		
		If !File(lcSearchExpressionTable)
			Create Table (lcSearchExpressionTable) Free (Expression C(128), Item I, scope C(254))
			Append Blank
			Use
		Endif
		
		If !Used(Juststem(lcSearchExpressionTable))
			Select 0
			Use (lcSearchExpressionTable)
		Endif
		
		Goto Top
		
	ENDPROC

	PROCEDURE Refresh
		Try
			This.Enabled = !Thisform.lSearching&& and !Thisform.lReplaceMode
		Catch
		Endtry
		
		
	ENDPROC

	PROCEDURE savesearchexpression
		Lparameters tcSearchExpression
		
		Local lcCursor, lcScope, lcTable, lnExpressionsToStore, loCombo
		
		If Empty(tcSearchExpression)
			Return
		Endif
		
		lcCursor = 'SearchExpressionHistory'
		lnExpressionsToStore = This.nExpressionsToStore
		lcTable = This.cTable
		lcScope = Lower(Thisform.GetCurrentScope())
		
		*-- New cursor with this new search express
		Create Cursor (lcCursor) (Expression C(128), Item I, scope C(254))
		Append Blank
		Replace Item With 1
		Replace Expression With tcSearchExpression
		Replace scope With lcScope
		
		*--- Pull other records from the scope out of expression hist table
		Insert Into (lcCursor) (Expression, Item, scope) ;
			Select Expression, Item + 1, scope From (lcTable) ;
			Where Item < lnExpressionsToStore ;
			And !(Rtrim(Expression) == Rtrim(tcSearchExpression)) ;
			And !Empty(Expression)
		
		Replace Item With Recno(lcCursor) In (lcCursor) All
		
		Use In (Juststem(lcTable))
		
		Try
			Delete File (lcTable)
			Copy To (lcTable)
			Use (lcTable)
		Catch
		Endtry
		
		This.LoadRows()
	ENDPROC

	PROCEDURE Valid
		If This.Tag = 'ESCAPE'
			With This.Parent.editSearch
				.Value = This.Parent.comboSearchExpressionHistoryDropDownArrow.Tag
				.SelStart = 999
				.SelLength = 1
			Endwith
			This.Tag = ''
		Endif
		
		lItemExists = .F. && assume the value isn't in the list.
		For i = 1 To This.ListCount
			If Lower(This.List(i)) = Lower(This.Text)
				lItemExists = .T.
				Exit
			Endif
		Endfor
		
		If !lItemExists
			This.AddItem(Lower(This.Text))
		Endif
		
		
		This.Value = This.Text
		
		Thisform.Refresh()
	ENDPROC

ENDDEFINE

DEFINE CLASS gf_combosearchscope AS combobox 
 	*< CLASSDATA: Baseclass="combobox" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "gofish.h"
	*<DefinedPropArrayMethod>
		*m: addrow
		*m: loadprojects		&& Adds a list item for each project in the passed collection of Projects.
		*m: loadrows
		*m: opentable
		*m: savesearchscope
		*m: updateimageicon
		*p: ctable
		*p: nexpressionstostore
		*p: nmaxmru
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	*<PropValue>
		Anchor = 10
		ctable = 
		Height = 24
		Name = "gf_combosearchscope"
		nexpressionstostore = 15
		nmaxmru = 7
		Width = 365
		_memberdata = <VFPData>
			<memberdata name="opentable" display="OpenTable"/>
			<memberdata name="nexpressionstostore" display="nExpressionsToStore"/>
			<memberdata name="savesearchscope" display="SaveSearchScope"/>
			<memberdata name="loadrows" display="LoadRows"/>
			<memberdata name="loadprojects" display="LoadProjects"/>
			<memberdata name="ctable" display="cTable"/>
			<memberdata name="addrow" display="AddRow"/>
			<memberdata name="updateimageicon" display="UpdateImageIcon"/>
			<memberdata name="nmaxmru" display="nMaxMRU"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE addrow
		Lparameters tcScope
		
		Local lItemExists, lcItem
		
		If Right(tcScope, 1) == ' '
			lcItem = Alltrim(Lower(tcScope))
		Else
			lcItem = tcScope
		EndIf
		
		lcItem = Rtrim(lcItem, '\')
		
		lItemExists = .F. && assume the value isn't in the list.
		
		For i = 1 To This.ListCount
			If Alltrim(Lower(This.List(i))) == lcItem
				lItemExists = .T.
				Exit
			Endif
		Endfor
		
		If !lItemExists
			This.AddItem(lcItem)
		Endif
	ENDPROC

	PROCEDURE GotFocus
		This.Tag = This.value
	ENDPROC

	PROCEDURE Init
		This.cTable = Addbs(Home(7)) + 'GF_Search_Scope_History.dbf'
		
		This.LoadRows()
		 
	ENDPROC

	PROCEDURE InteractiveChange
		This.UpdateImageIcon()
	ENDPROC

	PROCEDURE loadprojects		&& Adds a list item for each project in the passed collection of Projects.
		Lparameters toProjects
		
		Local lcSearchScopeTable, lnSelect, loProject
		
		lnSelect = Select()
		
		This.OpenTable()
		
		*-- Be sure that each of the recent projects are in the Scope History table ----------
		For Each loProject in toProjects
			Locate for Alltrim(Lower(scope)) == Alltrim(Lower(loProject))
			If !Found()
				Append Blank
				Replace scope with Alltrim(Lower(loProject))
				Replace item with Recno()
			Endif
		EndFor
		
		Select (lnSelect) 
	ENDPROC

	PROCEDURE loadrows
		Local lItemExists, lcItem, lnSelect, lcScope, lnCounter
		
		lnCounter = 0
		
		lnSelect = Select()
		
		This.OpenTable()
		
		*-- Rebuild the combobox values -------------------------------
		This.RowSource = '' && Clear out rows
		
		This.AddRow('\ -- Projects -------------------------')
		If Type('_vfp.ActiveProject') = 'O'
			This.AddRow('<< Active Project >>')
		Endif
		
		*-- Add Projects --------------------------
		Scan for Upper(JustExt(scope)) == 'PJX'
			This.AddRow(scope)
			lnCounter = lnCounter + 1
			If lnCounter = This.nMaxMRU
				Exit
			Endif
		Endscan
		
		This.AddRow('')
		This.AddRow('\ -- Folders ----------------------------')
		This.AddRow('<< Current Dir >>')
		
		*-- Add Folders
		Scan for Upper(JustExt(scope)) <> 'PJX'
			lcScope = scope
			If Left(lcScope,2) = '\\'
			 lcScope = '\' + '\' + lcScope
			Endif
		
			This.AddRow(lcScope)
		
			lnCounter = lnCounter + 1
		
			If lnCounter = 2 * This.nMaxMRU
				Exit
			Endif
		
		Endscan
		
		Use
		
		This.Refresh()
		
		Select (lnSelect)    
	ENDPROC

	PROCEDURE opentable
		Local lcTable, lnExpressionsToStore
		
		lcTable = This.cTable
		lnExpressionsToStore = This.nExpressionsToStore
		
		If !File(lcTable)
			Create Table (lcTable) Free (scope C(254), item I)
			Append Blank
			Use
		EndIf
		
		If !Used(JustStem(lcTable))
			Select 0
			Use (lcTable) 
		Else
			Select (JustStem(lcTable))
		Endif
		
		*-- Clean out any junk or missing scopes---
		Scan
			lcScope = Alltrim(scope)
			If !Directory(lcScope, 1) and !File(lcScope) or Empty(lcScope)
				Delete Next 1 In (JustStem(lcTable))
			Endif
		Endscan
		 
		Goto Top
		
	ENDPROC

	PROCEDURE Refresh
		This.UpdateImageIcon()
	ENDPROC

	PROCEDURE savesearchscope
		Lparameters tcSearchScope
		
		Local lItemExists, lcCursor, lcSearchScopeTable, lcTable, lnExpressionsToStore, lnSelect, loCombo
		
		lnSelect = Select()
		
		If Empty(tcSearchScope)
			Return
		Endif
		
		lcCursor = 'SearchScopeHistory'
		
		lcSearchScopeTable = This.cTable
		lnExpressionsToStore = This.nExpressionsToStore
		
		lcTable = Home(7) + lcSearchScopeTable + '.dbf'
		
		tcSearchScope = Rtrim(Alltrim(tcSearchScope), 0, '\')
		
		*-- New cursor with this new search express
		Create Cursor (lcCursor) (scope C(254), item I)
		Append Blank
		Replace item With 1
		Replace scope With tcSearchScope 
		
		*--- Pull other scope records from hist table
		Insert Into (lcCursor) (scope, item) ; 
			Select Distinct Lower(Rtrim(scope, ' ', '\')), item ;
			From (lcSearchScopeTable) ;
			Where item < lnExpressionsToStore ;
				and !(Lower(Rtrim(scope, ' ',  '\')) == Lower(Rtrim(tcSearchScope, ' ', '\'))) ;
				and !Empty(scope) ;
			Order By 2
		
		Replace item With Recno(lcCursor) in (lcCursor) All
		
		*-- Update the permanent table (newest record is now at top) ---------------
		Use in (JustStem(lcSearchScopeTable))
		
		Try
			Delete File (lcSearchScopeTable) 
			Copy To (lcSearchScopeTable)
		Catch
		Endtry
		
		This.LoadRows()
		
		Select (lnSelect) 
	ENDPROC

	PROCEDURE updateimageicon
		Local lcScope, loImage
		
		lcScope = Upper(This.Text)
		loImage = This.parent.imgScopeIcon
		loImage.Visible = .t.
		
		Do Case
		
			Case '.PJX' $ lcScope
				loImage.Picture = '..\images\gf_project_icon_16.bmp'
		
			Case Empty(lcScope)
				loImage.Picture = ''
				loImage.Visible = .f.
				
			Otherwise
				loImage.Picture = '..\images\gf_folder_icon_16.bmp'
		Endcase
		
		 
		
		 
	ENDPROC

	PROCEDURE Valid
		Local lItemExists
		
		lItemExists = .F. && assume the value isn't in the list.
		lcValue = Alltrim(This.Text)
		lcValue = Rtrim(Lower(lcValue), '\')
		
		If This.Value = This.Tag and !Empty(This.Tag)
			Return .t.
		EndIf
		
		For i = 1 To This.ListCount
			If Lower(This.List(i)) = lcValue
				lItemExists = .T.
				Exit
			Endif
		Endfor
		
		If !lItemExists
			This.AddItem(lcValue)
		Endif
		
		Do Case
		
			Case Empty(lcValue)
				Thisform.Refresh()
				Return
		
			Case lcValue == Lower('<< Active Project >>')
				Thisform.oSearchOptions.nSearchScope = 1
				lcValue = Lower(Thisform.oSearchEngine.GetActiveProject())
				Thisform.oSearchOptions.cProject = lcValue
		
			Case '.PJX' $ Upper(lcValue)
				If !File(lcValue)
					MessageBox('File not found.', 16, 'Error')
					This.Value = lcValue
					Return
				Endif
				Thisform.oSearchOptions.nSearchScope = 2
				Thisform.oSearchOptions.cProject = lcValue
		
			Case lcValue == Lower('<< Current Dir >>')
				Thisform.oSearchOptions.nSearchScope = 3
				lcValue = Alltrim(Lower(Thisform.oSearchEngine.GetCurrentDirectory()), '\')
				Thisform.oSearchOptions.cPath = lcValue
		
			Otherwise
				If !Directory(lcValue, 1)
					MessageBox('Invalid directory.', 16, 'Error')
					This.Value = lcValue
					Return
				Endif
				Thisform.oSearchOptions.nSearchScope = 4
				Thisform.oSearchOptions.cPath = lcValue
		
		Endcase
		
		This.SaveSearchScope(lcValue) && Will move this entry to the top of the list
		This.Value = Alltrim(lcValue)
		This.Tag = This.Value
		
		Thisform.Refresh()    
	ENDPROC

ENDDEFINE

DEFINE CLASS gf_filtercheckbox AS checkbox 
 	*< CLASSDATA: Baseclass="checkbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "gofish.h"
	*<DefinedPropArrayMethod>
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	*<PropValue>
		Alignment = 0
		AutoSize = .T.
		BackStyle = 0
		Caption = "<Caption>"
		FontName = "Tahoma"
		FontSize = 8
		Height = 15
		Name = "gf_filtercheckbox"
		TabIndex = 1
		Value = .T.
		Width = 71
		_memberdata = <VFPData>
			<memberdata name="caption" display="Caption"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE Click
		*By the time we get here, the value has already been toggled by VFP.
		*Toggle back to what it was before they clicked it.
		this.Value = !this.Value
		
		*-- Now process with this logic...
		If this.Value = .t. 
			this.Value = .f.
		Else
			If this.ForeColor = RGB(0,0,0)
				This.Value = .t.
			Endif
		EndIf
		
		this.Parent.Refresh()
		
		
		
		
			
	ENDPROC

ENDDEFINE

DEFINE CLASS gf_filtercheckboxcontainer AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Command1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Command2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Line1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Line2" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: clear		&& Clears the contents of a ComboBox or ListBox control.
		*m: cleardecoration
		*m: decorate
		*m: setallcheckboxes
		*p: cfilter
		*p: ncheckboxcount
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	*<PropValue>
		BorderColor = 150,150,150
		cfilter = 
		Height = 390
		Name = "filtercheckboxcontainer"
		ncheckboxcount = 0
		Width = 218
		_memberdata = <VFPData>
			<memberdata name="setallcheckboxes" display="SetAllCheckBoxes"/>
			<memberdata name="cfilter" display="cFilter"/>
			<memberdata name="ncheckboxcount" display="nCheckBoxCount"/>
			<memberdata name="bordercolor" display="BorderColor"/>
			<memberdata name="clear" display="Clear"/>
			<memberdata name="decorate" display="Decorate"/>
			<memberdata name="cleardecoration" display="ClearDecoration"/>
		</VFPData>
	*</PropValue>

	ADD OBJECT 'Command1' AS commandbutton WITH ;
		Anchor = 4, ;
		Caption = "All", ;
		FontSize = 8, ;
		Height = 21, ;
		Left = 10, ;
		Name = "Command1", ;
		TabStop = .F., ;
		Top = 367, ;
		Width = 31
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'Command2' AS commandbutton WITH ;
		Anchor = 4, ;
		Caption = "Clear", ;
		FontSize = 8, ;
		Height = 21, ;
		Left = 46, ;
		Name = "Command2", ;
		TabStop = .F., ;
		Top = 367, ;
		Width = 48
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'Label1' AS label WITH ;
		Alignment = 2, ;
		Anchor = 10, ;
		Caption = "Caption", ;
		Height = 17, ;
		Left = 7, ;
		Name = "Label1", ;
		Top = 4, ;
		Width = 207
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Line1' AS line WITH ;
		Anchor = 10, ;
		BorderColor = 192,192,192, ;
		Height = 0, ;
		Left = 6, ;
		Name = "Line1", ;
		Top = 20, ;
		Width = 207
		*< END OBJECT: BaseClass="line" />

	ADD OBJECT 'Line2' AS line WITH ;
		Anchor = 14, ;
		BorderColor = 192,192,192, ;
		Height = 0, ;
		Left = 5, ;
		Name = "Line2", ;
		Top = 362, ;
		Visible = .F., ;
		Width = 206
		*< END OBJECT: BaseClass="line" />
	
	PROCEDURE clear		&& Clears the contents of a ComboBox or ListBox control.
		For Each loControl in This.Controls
			If Upper(loControl.BaseClass) = 'CHECKBOX'
				loControl.value = 0
			Endif
		Endfor
		
		This.Refresh()
	ENDPROC

	PROCEDURE cleardecoration
		This.label1.FontBold = .f.
		This.BorderWidth = 1
		This.BorderColor = Rgb(175,175,175)
	ENDPROC

	PROCEDURE decorate
		This.label1.FontBold = .t.
		This.BorderWidth = 2
		This.BorderColor = Rgb(255,0,0)
		
	ENDPROC

	PROCEDURE Init
		Local loControl
		
		For Each loControl in This.Controls
			If Upper(loControl.baseclass) = 'CHECKBOX'
				this.nCheckBoxCount = this.nCheckBoxCount + 1
				BindEvent(loControl, 'Click', this, 'Refresh')
		
				*-- Apply This.label.caption so ControlSource will to match class property
				If !Empty(this.Label1.Tag) && Tag can override caption to set controlsource
					loControl.ControlSource = this.label1.Tag + '_' + Iif(!Empty(loControl.tag), loControl.Tag, loControl.Caption)
				Else
					lcProperty = Strtran(loControl.Caption, '<', '')
					lcProperty = Strtran(lcProperty, '>', '')
					lcProperty = Strtran(lcProperty, ' ', '')
		
					loControl.ControlSource = this.label1.Caption + '_' + Iif(!Empty(loControl.tag), loControl.Tag, lcProperty)
				Endif		
			
			Endif
				
		EndFor
		
		     
	ENDPROC

	PROCEDURE Refresh
		This.label1.FontBold = .f.
		This.ClearDecoration()
		
		For Each loControl in This.Controls
			If Upper(loControl.BaseClass) = 'CHECKBOX' and !Empty(loControl.value)&& and loControl.Enabled
				This.label1.FontBold = .t.
				This.Decorate()
				Exit
			Endif
		Endfor
		
				
		
	ENDPROC

	PROCEDURE setallcheckboxes
		Lparameters tnValue
		
		For each loControl in This.controls
			If PemStatus(loControl, 'Value', 5)
		*		If loControl.Enabled  = .t.
					loControl.value = tnValue
		*		EndIf
			EndIf
		EndFor
		
		
	ENDPROC

	PROCEDURE Command1.Click
		This.Parent.SetAllCheckboxes(1)
		This.Parent.Refresh()
	ENDPROC

	PROCEDURE Command2.Click
		This.parent.SetAllCheckboxes(0)
		This.Parent.Refresh()
	ENDPROC

ENDDEFINE

DEFINE CLASS gf_grid AS grid 
 	*< CLASSDATA: Baseclass="grid" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: arrangecolumns
		*m: findcolumn
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	*<PropValue>
		Height = 200
		Name = "gf_grid"
		Width = 320
		_memberdata = <VFPData>
			<memberdata name="arrangecolumns" display="ArrangeColumns"/>
			<memberdata name="findcolumn" display="FindColumn"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE arrangecolumns
		Local laColumns[1], lnColumnCount, lnI, loColumn
		
		lnColumnCount = This.ColumnCount
		
		Dimension laColumns[lnColumnCount, 4] 
		
		For lnI = 1 to lnColumnCount
			loColumn = This.Columns[lnI]
			laColumns[lnI, 1] = loColumn
			laColumns[lnI, 2] = loColumn.ColumnOrder
			laColumns[lnI, 3] = loColumn.Visible
			laColumns[lnI, 4] = loColumn.ControlSource
		EndFor
		
		Asort(laColumns, 2, -1, 0)
		Asort(laColumns, 3, -1, 1)
		
		For lnI = 1 to lnColumnCount
			loColumn = laColumns[lnI, 1]
			loColumn.ColumnOrder = lnI
		EndFor   
	ENDPROC

	PROCEDURE findcolumn
		Lparameters tcControlSource
		
		Local loColumn, lcControlSourceField
		
		For each loColumn in This.Columns
			lcControlSourceField = GetWordNum(loColumn.ControlSource, 2, '.')
			If Alltrim(Upper(lcControlSourceField)) == Alltrim(Upper(tcControlSource))
				Return loColumn
			Endif
		Endfor
		 
		
	ENDPROC

ENDDEFINE

DEFINE CLASS gf_progressbar AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Image1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="box" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="bar" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="bar.Image1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label2" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: nvalue_assign
		*m: reset		&& Resets the Timer control so that it starts counting from 0.
		*m: start
		*m: stop
		*m: update
		*p: csetcursor
		*p: nmaxvalue
		*p: nvalue
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	*<PropValue>
		BorderColor = 0,0,0
		csetcursor = 
		Height = 102
		Name = "gf_progressbar"
		nmaxvalue = 0
		nvalue = 0
		Width = 485
		_memberdata = <VFPData>
			<memberdata name="reset" display="Reset"/>
			<memberdata name="update" display="Update"/>
			<memberdata name="nvalue" display="nValue"/>
			<memberdata name="nmaxvalue" display="nMaxValue"/>
			<memberdata name="nvalue_assign" display="nValue_Assign"/>
			<memberdata name="start" display="Start"/>
			<memberdata name="csetcursor" display="cSetCursor"/>
			<memberdata name="stop" display="Stop"/>
		</VFPData>
	*</PropValue>

	ADD OBJECT 'bar' AS container WITH ;
		BackColor = 0,64,128, ;
		Height = 23, ;
		Left = 22, ;
		Name = "bar", ;
		Top = 45, ;
		Width = 228
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'bar.Image1' AS image WITH ;
		Height = 50, ;
		Left = 0, ;
		Name = "Image1", ;
		Picture = ..\images\progressbar.bmp, ;
		RotateFlip = 0, ;
		Stretch = 2, ;
		Top = -22, ;
		Width = 1000
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'box' AS container WITH ;
		BackColor = 128,128,128, ;
		BorderColor = 192,192,192, ;
		Height = 30, ;
		Left = 17, ;
		Name = "box", ;
		Top = 41, ;
		Width = 449
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'Image1' AS image WITH ;
		Height = 100, ;
		Left = 1, ;
		Name = "Image1", ;
		Picture = ..\images\progressbarbackground.bmp, ;
		Stretch = 2, ;
		Top = 1, ;
		Width = 483
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'Label1' AS label WITH ;
		BackStyle = 0, ;
		Caption = "Searching...", ;
		FontSize = 10, ;
		ForeColor = 255,255,255, ;
		Height = 23, ;
		Left = 17, ;
		Name = "Label1", ;
		Top = 8, ;
		Width = 163
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label2' AS label WITH ;
		BackStyle = 0, ;
		Caption = "Press ESCAPE to cancel.", ;
		FontSize = 9, ;
		ForeColor = 255,255,255, ;
		Height = 22, ;
		Left = 18, ;
		Name = "Label2", ;
		Top = 79, ;
		Width = 284
		*< END OBJECT: BaseClass="label" />
	
	PROCEDURE nvalue_assign
		lparameters tnValue
		
		This.nValue = tnValue
		
		This.Update()
		
	ENDPROC

	PROCEDURE reset		&& Resets the Timer control so that it starts counting from 0.
		This.bar.Width = 0
		This.Refresh()
	ENDPROC

	PROCEDURE start
		Lparameters tnMaxValue
		
		Local lnMaxValue
		
		lnMaxValue = Evl(tnMaxValue, 1)
		
		*This.cSetCursor = Set('Cursor')
		
		*Set Cursor Off
		
		This.nMaxValue = lnMaxValue 
		This.nValue = 0
		This.Visible = .t.
		This.Update()
		
		 
	ENDPROC

	PROCEDURE stop
		Local lcSetCursor
		
		*lcSetCursor = This.cSetCursor
		
		This.Visible = .f.
		
		*Set Cursor &lcSetCursor
	ENDPROC

	PROCEDURE update
		Local lnMaxValue
		
		lnMaxValue = Iif(This.nMaxValue < 0, 1, This.nMaxValue)
		
		This.Bar.Width = Int((This.nValue / lnMaxValue) * This.Box.Width * .97)
		
		If This.Bar.Width > This.Box.Width - 10
			This.Bar.Width = This.Box.Width - 10
		Endif
		
		
		
	ENDPROC

	PROCEDURE bar.Init
		This.Width = 0
	ENDPROC

ENDDEFINE

DEFINE CLASS gf_textboxcontainer AS gf_filtercheckboxcontainer OF "gofishui.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="txt1" UniqueID="" Timestamp="" />

	*<PropValue>
		Height = 390
		Name = "gf_textboxcontainer"
		_memberdata = <VFPData>
			<memberdata name="clear" display="Clear"/>
		</VFPData>
		Label1.Name = "Label1"
		Command1.Caption = "Clear"
		Command1.Height = 21
		Command1.Left = 10
		Command1.Name = "Command1"
		Command1.Top = 366
		Command1.Width = 43
		Command2.Left = 65
		Command2.Name = "Command2"
		Command2.Top = 366
		Command2.Visible = .F.
		LINE1.Name = "LINE1"
		LINE2.Name = "LINE2"
	*</PropValue>

	ADD OBJECT 'txt1' AS textbox WITH ;
		Anchor = 10, ;
		ControlSource = "", ;
		Height = 23, ;
		Left = 7, ;
		Name = "txt1", ;
		Top = 26, ;
		Width = 206
		*< END OBJECT: BaseClass="textbox" />
	
	PROCEDURE clear
		this.txt1.Value = ''
		This.ClearDecoration()
	ENDPROC

	PROCEDURE decorate
		llDecorate = !Empty(this.txt1.Value)
		
		This.ClearDecoration()
		
		If llDecorate
			DoDefault()
		EndIf
		
	ENDPROC

	PROCEDURE Init
		Local lcPrefix
		
		If !Empty(This.Label1.Tag) && Tag can override caption to set controlsource
			lcPrefix = Strtran(This.Label1.Tag, ' ', '')
		Else
			lcPrefix = Strtran(This.Label1.Caption, ' ', '')
		Endif
		
		This.txt1.ControlSource =  lcPrefix + '_Filter'
	ENDPROC

	PROCEDURE Refresh
		This.Decorate()
	ENDPROC

	PROCEDURE Command1.Click
		This.Parent.txt1.Value = ''
		this.Parent.Refresh()
		This.Parent.txt1.SetFocus()
		
	ENDPROC

	PROCEDURE txt1.InteractiveChange
		This.parent.Decorate()
	ENDPROC

ENDDEFINE

DEFINE CLASS gf_timestampcontainer AS gf_filtercheckboxcontainer OF "gofishui.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="chkTimeStamp" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label11" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label12" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtTimeStampFrom" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtTimeStampTo" UniqueID="" Timestamp="" />

	*<PropValue>
		Height = 111
		Name = "timestampcontainer"
		Width = 206
		Label1.Height = 16
		Label1.Left = 137
		Label1.Name = "Label1"
		Label1.Top = 2
		Label1.Visible = .F.
		Label1.Width = 60
		Command1.Name = "Command1"
		Command1.Top = 88
		Command1.Visible = .F.
		Command2.Name = "Command2"
		Command2.Top = 88
		Command2.Visible = .F.
		LINE1.Name = "LINE1"
		LINE1.Width = 195
		LINE2.Name = "LINE2"
		LINE2.Top = 83
		LINE2.Visible = .F.
		LINE2.Width = 194
	*</PropValue>

	ADD OBJECT 'chkTimeStamp' AS checkbox WITH ;
		Alignment = 0, ;
		BackStyle = 0, ;
		Caption = "TimeStamp Filter", ;
		ControlSource = "Thisform.oSearchEngine.oSearchOptions.lTimeStamp", ;
		FontBold = .F., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 7, ;
		Name = "chkTimeStamp", ;
		TabIndex = 20, ;
		Top = 1, ;
		Value = .T., ;
		Width = 104
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'Label11' AS label WITH ;
		AutoSize = .T., ;
		BackColor = 0,128,0, ;
		BackStyle = 0, ;
		Caption = "From", ;
		FontBold = .F., ;
		FontItalic = .F., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		Height = 15, ;
		Left = 11, ;
		Name = "Label11", ;
		TabIndex = 40, ;
		Top = 31, ;
		Width = 26
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label12' AS label WITH ;
		AutoSize = .T., ;
		BackColor = 0,128,0, ;
		BackStyle = 0, ;
		Caption = "To", ;
		FontBold = .F., ;
		FontItalic = .F., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		Height = 15, ;
		Left = 12, ;
		Name = "Label12", ;
		TabIndex = 40, ;
		Top = 55, ;
		Width = 14
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'txtTimeStampFrom' AS textbox WITH ;
		Alignment = 3, ;
		Anchor = 0, ;
		ControlSource = "Thisform.oFilter.Timestamp_FilterFrom", ;
		FontName = "Tahoma", ;
		FontSize = 9, ;
		Height = 23, ;
		Left = 42, ;
		Name = "txtTimeStampFrom", ;
		SelectOnEntry = .T., ;
		TabIndex = 30, ;
		Top = 26, ;
		Value = {}, ;
		Width = 95, ;
		ZOrderSet = 19
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'txtTimeStampTo' AS textbox WITH ;
		Alignment = 3, ;
		Anchor = 0, ;
		ControlSource = "Thisform.oFilter.Timestamp_FilterTo", ;
		FontName = "Tahoma", ;
		FontSize = 9, ;
		Height = 23, ;
		Left = 42, ;
		Name = "txtTimeStampTo", ;
		SelectOnEntry = .T., ;
		TabIndex = 31, ;
		Top = 53, ;
		Value = {}, ;
		Width = 95, ;
		ZOrderSet = 20
		*< END OBJECT: BaseClass="textbox" />
	
	PROCEDURE Refresh
		This.ClearDecoration()
		
		llChecked = !Empty(this.chkTimeStamp.Value)
		This.txtTimeStampFrom.Enabled = llChecked
		This.txtTimeStampTo.Enabled = llChecked
		
		If llChecked
			This.Decorate()
		EndIf
		
		
		
	ENDPROC

	PROCEDURE chkTimeStamp.Click
		DoDefault()
		
		This.Parent.Refresh()
		
		This.Parent.txtTimeStampFrom.SetFocus()
	ENDPROC

	PROCEDURE Command2.Click
		This.Parent.txtTimeStampFrom.Value = {}
		This.Parent.txtTimeStampTo.Value = {}
		this.Parent.ChkTimeStamp.Value = .f.
		this.Parent.Refresh()
		
	ENDPROC

ENDDEFINE

DEFINE CLASS gf_versionlabel AS label 
 	*< CLASSDATA: Baseclass="label" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<PropValue>
		Alignment = 1
		Anchor = 8
		BackColor = 0,128,0
		BackStyle = 0
		Caption = "Version"
		FontBold = .F.
		FontItalic = .F.
		FontName = "Tahoma"
		FontSize = 8
		ForeColor = 0,0,0
		Height = 13
		Left = 177
		Name = "lblVersion"
		TabIndex = 12
		Top = 9
		Width = 228
	*</PropValue>
	
	PROCEDURE Refresh
		Local lcAppName, lcVersion
		
		lcAppName = JustStem(_Screen._GoFish.cAppName)
		lcVersion = _Screen._GoFish.cVersion
		
		Try
			This.Caption = 'Version ' + lcVersion + Iif('BETA' $ Upper(lcAppName), ' Beta', '')
		Catch
			This.Caption = 'GoFish'
		Finally
		Endtry
		
		
	ENDPROC

ENDDEFINE

DEFINE CLASS progressform AS form 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cntProgressBar" UniqueID="" Timestamp="" />

	*<PropValue>
		AllowOutput = .F.
		AlwaysOnTop = .T.
		AutoCenter = .T.
		Caption = "Form1"
		DataSession = 1
		DoCreate = .T.
		Height = 102
		Name = "progressform"
		TitleBar = 0
		Visible = .T.
		Width = 485
	*</PropValue>

	ADD OBJECT 'cntProgressBar' AS gf_progressbar WITH ;
		Name = "cntProgressBar", ;
		Top = 0, ;
		Image1.Left = 1, ;
		Image1.Name = "Image1", ;
		Box.Left = 17, ;
		Box.Name = "Box", ;
		bar.Image1.Name = "Image1", ;
		bar.Left = 22, ;
		bar.Name = "bar", ;
		Label1.Left = 17, ;
		Label1.Name = "Label1", ;
		Label2.Left = 18, ;
		Label2.Name = "Label2"
		*< END OBJECT: ClassLib="thor_proc_progressbar.vcx" BaseClass="container" />

ENDDEFINE
