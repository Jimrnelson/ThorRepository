*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="thor_tool_wlchackintellisense.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*<PropValue>
		DataSource = .NULL.
		Height = 387
		Left = 993
		Name = "Dataenvironment"
		Top = 363
		Width = 520
	*</PropValue>

ENDDEFINE

DEFINE CLASS frmintellisenseeditor AS form 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cntSearchFilter" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntSearchFilter.cboType" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntSearchFilter.txtSearch" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntSearchFilter.lblSearch" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdFoxcode" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdFoxcode.colType.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdFoxcode.colType.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdFoxcode.colAbbrev.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdFoxcode.colAbbrev.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdFoxcode.colExpanded.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdFoxcode.colExpanded.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdFoxcode.colTimestamp.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdFoxcode.colTimestamp.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdSaveChanges" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdReverseChanges" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdClose" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfIntelliSenseEditor" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfIntelliSenseEditor.pagCommand.txtAbbrev" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfIntelliSenseEditor.pagCommand.lblAbbrev" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfIntelliSenseEditor.pagCommand.txtExpanded" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfIntelliSenseEditor.pagCommand.lblExpanded" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfIntelliSenseEditor.pagCommand.txtCmd" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfIntelliSenseEditor.pagCommand.lblCmd" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfIntelliSenseEditor.pagCommand.edtTip" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfIntelliSenseEditor.pagCommand.lblTip" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfIntelliSenseEditor.pagCommand.edtData" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfIntelliSenseEditor.pagCommand.lblData" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfIntelliSenseEditor.pagCommand.lblCase" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfIntelliSenseEditor.pagCommand.chkSave" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfIntelliSenseEditor.pagCommand.txtTimestamp" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfIntelliSenseEditor.pagCommand.lblTimestamp" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfIntelliSenseEditor.pagCommand.edtSource" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfIntelliSenseEditor.pagCommand.lblSource" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfIntelliSenseEditor.pagCommand.txtUniqueid" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfIntelliSenseEditor.pagCommand.lblUniqueid" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfIntelliSenseEditor.pagCommand.edtUser" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfIntelliSenseEditor.pagCommand.lblUser" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfIntelliSenseEditor.pagCommand.cmdTimeStamp" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfIntelliSenseEditor.pagCommand.cmdUniqueID" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfIntelliSenseEditor.pagCommand.cboCase" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfIntelliSenseEditor.pagCommand.cboType" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfIntelliSenseEditor.pagCommand.lblType" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfIntelliSenseEditor.pagCommand.cmdEdit" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfIntelliSenseEditor.pagCommand.cmdPastesignature" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfIntelliSenseEditor.pagCommand.cmdSaveassignature" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pgfIntelliSenseEditor.pagCommand.cmdTest" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblSave" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblReverse" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdAdd" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdRemove" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblAdd" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblRemove" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdDuplicate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDuplicate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblRecordCounter" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblPendingChangesRecord" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblPendingChangesFile" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdBackupIntelliSense" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdBrowse" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdExport" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ctrExportFile" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ctrExportFile.lblExportFoxCodeRecords" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ctrExportFile.edtExportCriteria" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ctrExportFile.txtExportFile" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ctrExportFile.cmdPickFile" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ctrExportFile.cmdExport" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ctrExportFile.cmdClose" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntFoxCodeTableName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntFoxCodeTableName.lblFoxCodeAlias" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboSortOrder" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblSortOrder" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkShowDeletedRows" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: addrow		&& This method is called to add a row to the base table.
		*m: backupintellisense		&& This method is called to backup the base table.
		*m: browse2ndcopytable		&& This methiod is called to browse a second copy of the base table to look for example code.
		*m: browsetable		&& This method is called to browse all the fields in the base table.
		*m: buildtmpfoxcode		&& Build the TmpFoxCode table, set it as _FoxCode
		*m: cexportfilename_assign
		*m: changerow		&& This method is called when a row is changed in the base table.
		*m: csortorder_assign
		*m: duplicaterow		&& This method is called to duplicate a row in the base table.
		*m: exportrecords		&& This method is called to export the records from the base table to a free table.
		*m: isthorinstalled
		*m: lookupdefaultcase		&& This method is called to look up the default case for IntelliSense as selected by the developer.
		*m: lshowdeletedrows_assign
		*m: removerow		&& This method is called to remove a row in the base table.
		*m: restorepersistentproperties
		*m: reverttable		&& This method is called to reverse out all the changes to the base table.
		*m: savetable		&& This method is called to commit all changes to the base table.
		*m: setfilter
		*m: texteditdata		&& This method is called to bring up program editor for the Data memo in the base table.
		*m: zzabout		&& This method is for the form's documentation and copyright.
		*p: ceditorfilename		&& This property is the name of the program file used to edit program code from the base table.
		*p: cexportcriteria		&& This property is the code for filtering records from FoxCode during export
		*p: cexportfilename		&& This property is the file name of the free table exported with the records from base table
		*p: choldfoxcodepath		&& Hold the path to where the FoxCode table is.
		*p: csearchfilter
		*p: csignature
		*p: csortorder		&& This property is the order the foxcode table is set to.
		*p: ctypefilter
		*p: cversion		&& This property is the version number of this tool.
		*p: cversionfull		&& This property is the full version of this tool.
		*p: lintellisensetableopen		&& This property indicates if the Intellisense table is open or not.
		*p: lshowdeletedrows		&& This property determines if the deleted rows in FoxCode are displayed.
		*p: osettings
		*a: acases[5,2]		&& This property is an array of valid character cases.
		*a: atags[1,6]		&& This array contains tag information from FoxCode to allow developer to pick order.
		*a: atypes[1,0]		&& This property is an array of different IntelliSense types.
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	*<PropValue>
		AutoCenter = .T.
		Caption = "WLC Hack IntelliSense"
		ceditorfilename = __HackIntelliSense.prg
		cexportcriteria = "white light computing" $ LOWER(user) OR "rick borup" $ LOWER(user) OR "wiki" $ LOWER(user)
		cexportfilename = PracticalIntelliSenseExamples.dbf
		choldfoxcodepath = .F.
		csearchfilter = 
		csignature = 
		csortorder = Type and Abbreviation
		ctypefilter = ?
		cversion = v1.5.3
		cversionfull = November 24, 2014
		DataSession = 2
		DoCreate = .T.
		Height = 594
		lintellisensetableopen = .T.
		lshowdeletedrows = .T.
		MinHeight = 590
		MinWidth = 950
		Name = "frmIntellisenseEditor"
		osettings = 
		ShowTips = .T.
		Width = 950
		_memberdata = <VFPData>
			<memberdata name="lintellisensetableopen" type="property" display="lIntellisenseTableOpen"/>
			<memberdata name="atypes" type="property" display="aTypes"/>
			<memberdata name="addrow" display="AddRow"/>
			<memberdata name="duplicaterow" display="DuplicateRow"/>
			<memberdata name="removerow" display="RemoveRow"/>
			<memberdata name="reverttable" display="RevertTable"/>
			<memberdata name="savetable" display="SaveTable"/>
			<memberdata name="backupintellisense" display="BackupIntelliSense"/>
			<memberdata name="zzabout" display="zzAbout"/>
			<memberdata name="acases" type="property" display="aCases"/>
			<memberdata name="changerow" display="ChangeRow"/>
			<memberdata name="lookupdefaultcase" display="LookupDefaultCase"/>
			<memberdata name="browsetable" display="BrowseTable"/>
			<memberdata name="texteditdata" display="TextEditData"/>
			<memberdata name="ceditorfilename" type="property" display="cEditorFileName"/>
			<memberdata name="browse2ndcopytable" display="Browse2ndCopyTable"/>
			<memberdata name="cexportcriteria" type="property" display="cExportCriteria"/>
			<memberdata name="cexportfilename" type="property" display="cExportFileName"/>
			<memberdata name="cexportfilename_assign" type="property" display="cExportFileName_Assign"/>
			<memberdata name="exportrecords" display="ExportRecords"/>
			<memberdata name="ctypefilter" display="cTypeFilter"/>
			<memberdata name="setfilter" display="SetFilter"/>
			<memberdata name="csearchfilter" display="cSearchFilter"/>
			<memberdata name="isthorinstalled" display="IsThorInstalled"/>
			<memberdata name="osettings" display="oSettings"/>
			<memberdata name="atags[1]" display="aTags[1]"/>
			<memberdata name="csortorder" type="property" display="cSortOrder"/>
			<memberdata name="csortorder_assign" type="property" display="cSortOrder_Assign"/>
			<memberdata name="atags" type="property" display="aTags"/>
			<memberdata name="cversion" type="property" display="cVersion"/>
			<memberdata name="cversionfull" type="property" display="cVersionFull"/>
			<memberdata name="lshowdeletedrows" type="property" display="lShowDeletedRows"/>
			<memberdata name="lshowdeletedrows_assign" type="property" display="lShowDeletedRows_Assign"/>
			<memberdata name="csignature" display="cSignature"/>
			<memberdata name="restorepersistentproperties" display="RestorePersistentProperties"/>
			<memberdata name="lbuildtmpfoxcode" display="lBuildTmpFoxCode"/>
		</VFPData>
	*</PropValue>

	ADD OBJECT 'cboSortOrder' AS combobox WITH ;
		Anchor = 3, ;
		ControlSource = "thisform.cSortOrder", ;
		FontName = "Segoe UI", ;
		Height = 24, ;
		Left = 780, ;
		Name = "cboSortOrder", ;
		RowSource = "thisform.aTags", ;
		RowSourceType = 5, ;
		Style = 2, ;
		TabIndex = 7, ;
		Top = 46, ;
		Width = 156
		*< END OBJECT: BaseClass="combobox" />

	ADD OBJECT 'chkShowDeletedRows' AS checkbox WITH ;
		Alignment = 0, ;
		Anchor = 3, ;
		BackStyle = 0, ;
		Caption = "Show deleted rows?", ;
		ControlSource = "thisform.lShowDeletedRows", ;
		FontName = "Segoe UI", ;
		Height = 17, ;
		Left = 780, ;
		Name = "chkShowDeletedRows", ;
		TabIndex = 8, ;
		Top = 74, ;
		Width = 132
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'cmdAdd' AS commandbutton WITH ;
		Anchor = 6, ;
		Caption = "Add", ;
		Height = 27, ;
		Left = 212, ;
		Name = "cmdAdd", ;
		SpecialEffect = 2, ;
		TabIndex = 12, ;
		Top = 536, ;
		Width = 72
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdBackupIntelliSense' AS commandbutton WITH ;
		Anchor = 6, ;
		Caption = "Backup IntelliSense", ;
		Height = 27, ;
		Left = 12, ;
		Name = "cmdBackupIntelliSense", ;
		SpecialEffect = 2, ;
		TabIndex = 10, ;
		Top = 536, ;
		Width = 120
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdBrowse' AS commandbutton WITH ;
		Anchor = 3, ;
		Caption = "Browse All", ;
		FontName = "Segoe UI", ;
		Height = 27, ;
		Left = 648, ;
		Name = "cmdBrowse", ;
		SpecialEffect = 2, ;
		TabIndex = 3, ;
		ToolTipText = "Browse all the records for larger navigation", ;
		Top = 46, ;
		Width = 108
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdClose' AS commandbutton WITH ;
		Anchor = 12, ;
		Caption = "Close", ;
		Height = 27, ;
		Left = 856, ;
		Name = "cmdClose", ;
		SpecialEffect = 2, ;
		TabIndex = 21, ;
		Top = 536, ;
		Width = 84
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdDuplicate' AS commandbutton WITH ;
		Anchor = 6, ;
		Caption = "Duplicate", ;
		Height = 27, ;
		Left = 327, ;
		Name = "cmdDuplicate", ;
		SpecialEffect = 2, ;
		TabIndex = 14, ;
		Top = 536, ;
		Width = 72
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdExport' AS commandbutton WITH ;
		Anchor = 3, ;
		Caption = "Export", ;
		FontName = "Segoe UI", ;
		Height = 27, ;
		Left = 648, ;
		Name = "cmdExport", ;
		SpecialEffect = 2, ;
		TabIndex = 5, ;
		ToolTipText = "Open dialog to export certain records from your FoxCode to share with others", ;
		Top = 74, ;
		Width = 108
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdRemove' AS commandbutton WITH ;
		Anchor = 6, ;
		Caption = "Remove", ;
		Height = 27, ;
		Left = 433, ;
		Name = "cmdRemove", ;
		SpecialEffect = 2, ;
		TabIndex = 16, ;
		Top = 536, ;
		Width = 72
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdReverseChanges' AS commandbutton WITH ;
		Anchor = 12, ;
		Caption = "Reverse Changes", ;
		Height = 27, ;
		Left = 726, ;
		Name = "cmdReverseChanges", ;
		SpecialEffect = 2, ;
		TabIndex = 20, ;
		Top = 536, ;
		Width = 108
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdSaveChanges' AS commandbutton WITH ;
		Anchor = 12, ;
		Caption = "Commit Changes", ;
		Height = 27, ;
		Left = 585, ;
		Name = "cmdSaveChanges", ;
		SpecialEffect = 2, ;
		TabIndex = 18, ;
		Top = 536, ;
		Width = 108
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cntFoxCodeTableName' AS container WITH ;
		Anchor = 14, ;
		BackColor = 192,192,192, ;
		Height = 25, ;
		Left = -1, ;
		Name = "cntFoxCodeTableName", ;
		TabIndex = 26, ;
		Top = 570, ;
		Width = 952
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'cntFoxCodeTableName.lblFoxCodeAlias' AS label WITH ;
		BackStyle = 0, ;
		Caption = "FoxCode Table Name", ;
		FontName = "Segoe UI", ;
		Height = 15, ;
		Left = 7, ;
		Name = "lblFoxCodeAlias", ;
		TabIndex = 1, ;
		Top = 6, ;
		Width = 938
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'cntSearchFilter' AS container WITH ;
		BackColor = 128,128,64, ;
		Height = 39, ;
		Left = 13, ;
		Name = "cntSearchFilter", ;
		TabIndex = 1, ;
		Top = 3, ;
		Width = 530
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'cntSearchFilter.cboType' AS combobox WITH ;
		BoundColumn = 2, ;
		ControlSource = "Thisform.cTypeFilter", ;
		DisplayCount = 15, ;
		FontName = "Segoe UI", ;
		Height = 24, ;
		Left = 310, ;
		Name = "cboType", ;
		RowSourceType = 5, ;
		Style = 2, ;
		TabIndex = 3, ;
		TabStop = .F., ;
		Top = 9, ;
		Width = 156
		*< END OBJECT: BaseClass="combobox" />

	ADD OBJECT 'cntSearchFilter.lblSearch' AS label WITH ;
		BackStyle = 0, ;
		Caption = "$", ;
		FontBold = .T., ;
		FontName = "Wingdings", ;
		FontSize = 18, ;
		ForeColor = 255,255,255, ;
		Height = 25, ;
		Left = 479, ;
		Name = "lblSearch", ;
		TabIndex = 1, ;
		Top = 8, ;
		Width = 37
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'cntSearchFilter.txtSearch' AS textbox WITH ;
		Format = "!", ;
		Height = 25, ;
		Left = 11, ;
		Name = "txtSearch", ;
		SelectOnEntry = .T., ;
		TabIndex = 2, ;
		Top = 9, ;
		Width = 289
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'ctrExportFile' AS container WITH ;
		Anchor = 15, ;
		BorderWidth = 2, ;
		Height = 273, ;
		Left = 156, ;
		Name = "ctrExportFile", ;
		TabIndex = 25, ;
		Top = 192, ;
		Visible = .F., ;
		Width = 660
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'ctrExportFile.cmdClose' AS commandbutton WITH ;
		Anchor = 12, ;
		Caption = "Close", ;
		FontName = "Segoe UI", ;
		Height = 27, ;
		Left = 540, ;
		Name = "cmdClose", ;
		Top = 224, ;
		Width = 84
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'ctrExportFile.cmdExport' AS commandbutton WITH ;
		Anchor = 12, ;
		Caption = "Export", ;
		FontName = "Segoe UI", ;
		Height = 27, ;
		Left = 432, ;
		Name = "cmdExport", ;
		Top = 224, ;
		Width = 84
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'ctrExportFile.cmdPickFile' AS commandbutton WITH ;
		Anchor = 12, ;
		Caption = "...", ;
		FontName = "Segoe UI", ;
		Height = 25, ;
		Left = 600, ;
		Name = "cmdPickFile", ;
		Top = 176, ;
		Width = 25
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'ctrExportFile.edtExportCriteria' AS editbox WITH ;
		Anchor = 15, ;
		ControlSource = "thisform.cExportCriteria", ;
		FontName = "Segoe UI", ;
		Height = 118, ;
		Left = 36, ;
		Name = "edtExportCriteria", ;
		Top = 35, ;
		Width = 588
		*< END OBJECT: BaseClass="editbox" />

	ADD OBJECT 'ctrExportFile.lblExportFoxCodeRecords' AS label WITH ;
		AutoSize = .T., ;
		Caption = "Export FoxCode Records", ;
		FontBold = .T., ;
		FontName = "Segoe UI", ;
		FontSize = 11, ;
		Height = 22, ;
		Left = 36, ;
		Name = "lblExportFoxCodeRecords", ;
		Top = 10, ;
		Width = 172
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'ctrExportFile.txtExportFile' AS textbox WITH ;
		Anchor = 14, ;
		ControlSource = "thisform.cExportFilename", ;
		FontName = "Segoe UI", ;
		Height = 25, ;
		Left = 36, ;
		Name = "txtExportFile", ;
		Top = 177, ;
		Width = 564
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'grdFoxcode' AS grid WITH ;
		Anchor = 5, ;
		ColumnCount = 4, ;
		FontName = "Segoe UI", ;
		Height = 144, ;
		HighlightBackColor = 255,255,128, ;
		HighlightForeColor = 0,0,0, ;
		HighlightStyle = 2, ;
		Left = 12, ;
		Name = "grdFoxcode", ;
		Panel = 1, ;
		ReadOnly = .T., ;
		RecordMark = .F., ;
		RecordSource = "foxcode", ;
		RecordSourceType = 1, ;
		TabIndex = 2, ;
		Top = 47, ;
		Width = 631, ;
		Column1.ControlSource = "foxcode.type", ;
		Column1.FontName = "Segoe UI", ;
		Column1.Name = "colType", ;
		Column1.ReadOnly = .T., ;
		Column1.Width = 57, ;
		Column2.ControlSource = "foxcode.abbrev", ;
		Column2.FontName = "Segoe UI", ;
		Column2.Name = "colAbbrev", ;
		Column2.ReadOnly = .T., ;
		Column2.Width = 154, ;
		Column3.ControlSource = "foxcode.expanded", ;
		Column3.FontName = "Segoe UI", ;
		Column3.Name = "colExpanded", ;
		Column3.ReadOnly = .T., ;
		Column3.Width = 244, ;
		Column4.ControlSource = "foxcode.timestamp", ;
		Column4.FontName = "Segoe UI", ;
		Column4.Name = "colTimestamp", ;
		Column4.ReadOnly = .T., ;
		Column4.Width = 142
		*< END OBJECT: BaseClass="grid" />

	ADD OBJECT 'grdFoxcode.colAbbrev.Header1' AS header WITH ;
		Caption = "Abbreviation", ;
		FontName = "Segoe UI", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdFoxcode.colAbbrev.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		FontName = "Segoe UI", ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1", ;
		ReadOnly = .T.
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'grdFoxcode.colExpanded.Header1' AS header WITH ;
		Caption = "Expanded", ;
		FontName = "Segoe UI", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdFoxcode.colExpanded.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		FontName = "Segoe UI", ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1", ;
		ReadOnly = .T.
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'grdFoxcode.colTimestamp.Header1' AS header WITH ;
		Caption = "Time Stamp", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdFoxcode.colTimestamp.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1"
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'grdFoxcode.colType.Header1' AS header WITH ;
		Caption = "Type", ;
		FontName = "Segoe UI", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdFoxcode.colType.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		FontName = "Segoe UI", ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1", ;
		ReadOnly = .T.
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'lblAdd' AS label WITH ;
		Anchor = 6, ;
		BackStyle = 0, ;
		Caption = "@", ;
		FontBold = .T., ;
		FontName = "Wingdings", ;
		FontSize = 24, ;
		ForeColor = 0,0,255, ;
		Height = 38, ;
		Left = 183, ;
		Name = "lblAdd", ;
		Style = 3, ;
		TabIndex = 11, ;
		ToolTipText = "Add", ;
		Top = 527, ;
		Width = 27
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblDuplicate' AS label WITH ;
		Anchor = 6, ;
		BackStyle = 0, ;
		Caption = "4", ;
		FontBold = .T., ;
		FontName = "Wingdings", ;
		FontSize = 22, ;
		ForeColor = 0,128,255, ;
		Height = 35, ;
		Left = 298, ;
		Name = "lblDuplicate", ;
		TabIndex = 13, ;
		ToolTipText = "Duplicate", ;
		Top = 533, ;
		Width = 27
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblPendingChangesFile' AS label WITH ;
		Alignment = 2, ;
		Anchor = 9, ;
		AutoSize = .F., ;
		BackColor = 128,128,0, ;
		BackStyle = 1, ;
		Caption = "   Pending Changes to this IntelliSense file!!   ", ;
		FontBold = .T., ;
		FontName = "Segoe UI", ;
		ForeColor = 255,255,255, ;
		Height = 19, ;
		Left = 660, ;
		Name = "lblPendingChangesFile", ;
		TabIndex = 24, ;
		Top = 168, ;
		Visible = .F., ;
		Width = 276, ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblPendingChangesRecord' AS label WITH ;
		Alignment = 2, ;
		Anchor = 9, ;
		AutoSize = .F., ;
		BackColor = 128,0,0, ;
		BackStyle = 1, ;
		Caption = "   Pending Changes to this IntelliSense item!!!   ", ;
		FontBold = .T., ;
		FontName = "Segoe UI", ;
		ForeColor = 255,255,255, ;
		Height = 19, ;
		Left = 660, ;
		Name = "lblPendingChangesRecord", ;
		TabIndex = 23, ;
		Top = 151, ;
		Visible = .F., ;
		Width = 276, ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblRecordCounter' AS label WITH ;
		Alignment = 1, ;
		Anchor = 9, ;
		BackStyle = 0, ;
		Caption = "Record Counter", ;
		FontBold = .T., ;
		FontName = "Segoe UI", ;
		ForeColor = 0,128,255, ;
		Height = 17, ;
		Left = 612, ;
		Name = "lblRecordCounter", ;
		TabIndex = 22, ;
		Top = 4, ;
		Width = 328, ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblRemove' AS label WITH ;
		Anchor = 6, ;
		BackStyle = 0, ;
		Caption = "û", ;
		FontBold = .T., ;
		FontName = "Wingdings", ;
		FontSize = 26, ;
		ForeColor = 255,0,0, ;
		Height = 33, ;
		Left = 409, ;
		Name = "lblRemove", ;
		TabIndex = 15, ;
		ToolTipText = "Remove", ;
		Top = 532, ;
		Width = 21
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblReverse' AS label WITH ;
		Anchor = 12, ;
		BackStyle = 0, ;
		Caption = "D", ;
		FontBold = .T., ;
		FontName = "Wingdings", ;
		FontSize = 24, ;
		ForeColor = 0,0,0, ;
		Height = 33, ;
		Left = 704, ;
		Name = "lblReverse", ;
		TabIndex = 19, ;
		ToolTipText = "Reverse Changes", ;
		Top = 530, ;
		Width = 21
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblSave' AS label WITH ;
		Anchor = 12, ;
		BackStyle = 0, ;
		Caption = "C", ;
		FontBold = .T., ;
		FontName = "Wingdings", ;
		FontSize = 24, ;
		ForeColor = 0,128,0, ;
		Height = 30, ;
		Left = 561, ;
		Name = "lblSave", ;
		TabIndex = 17, ;
		ToolTipText = "Commit Changes", ;
		Top = 536, ;
		Width = 27
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblSortOrder' AS label WITH ;
		Anchor = 3, ;
		AutoSize = .F., ;
		BackStyle = 0, ;
		Caption = "Sort Order", ;
		FontName = "Segoe UI", ;
		Height = 17, ;
		Left = 780, ;
		Name = "lblSortOrder", ;
		TabIndex = 6, ;
		Top = 30, ;
		Width = 108, ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pgfIntelliSenseEditor' AS pageframe WITH ;
		Anchor = 14, ;
		ErasePage = .T., ;
		Height = 329, ;
		Left = 12, ;
		Name = "pgfIntelliSenseEditor", ;
		PageCount = 2, ;
		TabIndex = 9, ;
		Tabs = .F., ;
		Top = 196, ;
		Width = 928, ;
		Page1.Caption = "Page1", ;
		Page1.Name = "pagCommand", ;
		Page2.Caption = "Page2", ;
		Page2.Name = "pagAbout"
		*< END OBJECT: BaseClass="pageframe" />

	ADD OBJECT 'pgfIntelliSenseEditor.pagCommand.cboCase' AS combobox WITH ;
		BoundColumn = 2, ;
		ControlSource = "foxcode.Case", ;
		Height = 25, ;
		Left = 754, ;
		Name = "cboCase", ;
		NumberOfElements = 6, ;
		RowSource = "thisform.aCases", ;
		RowSourceType = 5, ;
		Style = 2, ;
		TabIndex = 10, ;
		ToolTipText = "", ;
		Top = 26, ;
		Width = 145
		*< END OBJECT: BaseClass="combobox" />

	ADD OBJECT 'pgfIntelliSenseEditor.pagCommand.cboType' AS combobox WITH ;
		BoundColumn = 2, ;
		ControlSource = "foxcode.Type", ;
		DisplayCount = 11, ;
		FontName = "Segoe UI", ;
		Height = 24, ;
		Left = 6, ;
		Name = "cboType", ;
		RowSource = "thisform.aTypes", ;
		RowSourceType = 5, ;
		Style = 2, ;
		TabIndex = 2, ;
		TabStop = .F., ;
		Top = 26, ;
		Width = 156
		*< END OBJECT: BaseClass="combobox" />

	ADD OBJECT 'pgfIntelliSenseEditor.pagCommand.chkSave' AS checkbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Save?", ;
		ControlSource = "foxcode.save", ;
		FontName = "Segoe UI", ;
		Height = 17, ;
		Left = 183, ;
		Name = "chkSave", ;
		TabIndex = 14, ;
		ToolTipText = "Mark this record as saved so Intellisense cleanup will not overwrite it", ;
		Top = 81, ;
		Width = 47
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'pgfIntelliSenseEditor.pagCommand.cmdEdit' AS commandbutton WITH ;
		Anchor = 0, ;
		AutoSize = .F., ;
		Caption = "Edit", ;
		FontSize = 8, ;
		Height = 18, ;
		Left = 439, ;
		Name = "cmdEdit", ;
		SpecialEffect = 0, ;
		TabIndex = 27, ;
		ToolTipText = "Edit Data content in normal code window with full IntelliSense", ;
		Top = 53, ;
		Width = 45
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'pgfIntelliSenseEditor.pagCommand.cmdPastesignature' AS commandbutton WITH ;
		Anchor = 0, ;
		AutoSize = .F., ;
		Caption = "Paste signature", ;
		FontSize = 8, ;
		Height = 18, ;
		Left = 46, ;
		Name = "cmdPastesignature", ;
		SpecialEffect = 0, ;
		TabIndex = 23, ;
		ToolTipText = "Paste your personalized signature into the User column", ;
		Top = 216, ;
		Width = 99
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'pgfIntelliSenseEditor.pagCommand.cmdSaveassignature' AS commandbutton WITH ;
		Anchor = 0, ;
		AutoSize = .F., ;
		Caption = "Save as signature", ;
		FontSize = 8, ;
		Height = 18, ;
		Left = 158, ;
		Name = "cmdSaveassignature", ;
		SpecialEffect = 0, ;
		TabIndex = 24, ;
		ToolTipText = "Save your personalized signature from the User column to Thor settings", ;
		Top = 216, ;
		Width = 119
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'pgfIntelliSenseEditor.pagCommand.cmdTest' AS commandbutton WITH ;
		Anchor = 0, ;
		Caption = "Test", ;
		Comment = "modi c", ;
		FontSize = 8, ;
		Height = 18, ;
		Left = 490, ;
		Name = "cmdTest", ;
		SpecialEffect = 0, ;
		TabIndex = 27, ;
		ToolTipText = "Open program and automatically test the selected IntelliSense functionality", ;
		Top = 53, ;
		Width = 45
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'pgfIntelliSenseEditor.pagCommand.cmdTimeStamp' AS commandbutton WITH ;
		Anchor = 6, ;
		Caption = "...", ;
		FontName = "Segoe UI", ;
		Height = 25, ;
		Left = 148, ;
		Name = "cmdTimeStamp", ;
		TabIndex = 18, ;
		ToolTipText = "Set the Timestamp to new value", ;
		Top = 173, ;
		Width = 24
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'pgfIntelliSenseEditor.pagCommand.cmdUniqueID' AS commandbutton WITH ;
		Caption = "...", ;
		FontName = "Segoe UI", ;
		Height = 25, ;
		Left = 115, ;
		Name = "cmdUniqueID", ;
		TabIndex = 12, ;
		ToolTipText = "Set the UniqueID to new value", ;
		Top = 77, ;
		Width = 24
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'pgfIntelliSenseEditor.pagCommand.edtData' AS editbox WITH ;
		Anchor = 15, ;
		ControlSource = "foxcode.data", ;
		FontName = "Consolas", ;
		FontSize = 8, ;
		Height = 239, ;
		Left = 402, ;
		Name = "edtData", ;
		TabIndex = 28, ;
		Top = 72, ;
		Width = 514
		*< END OBJECT: BaseClass="editbox" />

	ADD OBJECT 'pgfIntelliSenseEditor.pagCommand.edtSource' AS editbox WITH ;
		Anchor = 6, ;
		ControlSource = "foxcode.source", ;
		FontName = "Segoe UI", ;
		Height = 36, ;
		Left = 188, ;
		Name = "edtSource", ;
		TabIndex = 21, ;
		Top = 173, ;
		Width = 201
		*< END OBJECT: BaseClass="editbox" />

	ADD OBJECT 'pgfIntelliSenseEditor.pagCommand.edtTip' AS editbox WITH ;
		Anchor = 5, ;
		BackColor = 255,255,128, ;
		ControlSource = "foxcode.tip", ;
		FontName = "Segoe UI", ;
		Height = 23, ;
		Left = 6, ;
		Name = "edtTip", ;
		TabIndex = 16, ;
		Top = 126, ;
		Width = 384
		*< END OBJECT: BaseClass="editbox" />

	ADD OBJECT 'pgfIntelliSenseEditor.pagCommand.edtUser' AS editbox WITH ;
		Anchor = 6, ;
		ControlSource = "foxcode.user", ;
		FontName = "Segoe UI", ;
		Height = 76, ;
		Left = 6, ;
		Name = "edtUser", ;
		TabIndex = 25, ;
		Top = 235, ;
		Width = 384
		*< END OBJECT: BaseClass="editbox" />

	ADD OBJECT 'pgfIntelliSenseEditor.pagCommand.lblAbbrev' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Abbrev", ;
		FontName = "Segoe UI", ;
		Left = 183, ;
		Name = "lblAbbrev", ;
		TabIndex = 3, ;
		Top = 8, ;
		Width = 38, ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pgfIntelliSenseEditor.pagCommand.lblCase' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Case", ;
		FontName = "Segoe UI", ;
		Left = 754, ;
		Name = "lblCase", ;
		TabIndex = 9, ;
		Top = 8, ;
		Width = 25, ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pgfIntelliSenseEditor.pagCommand.lblCmd' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Cmd", ;
		FontName = "Segoe UI", ;
		Left = 608, ;
		Name = "lblCmd", ;
		TabIndex = 7, ;
		Top = 8, ;
		Width = 26, ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pgfIntelliSenseEditor.pagCommand.lblData' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Data", ;
		Left = 402, ;
		Name = "lblData", ;
		TabIndex = 26, ;
		Top = 56, ;
		Width = 26, ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pgfIntelliSenseEditor.pagCommand.lblExpanded' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Expanded", ;
		FontName = "Segoe UI", ;
		Left = 387, ;
		Name = "lblExpanded", ;
		TabIndex = 5, ;
		Top = 8, ;
		Width = 51, ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pgfIntelliSenseEditor.pagCommand.lblSource' AS label WITH ;
		Anchor = 6, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Source", ;
		FontName = "Segoe UI", ;
		Height = 17, ;
		Left = 188, ;
		Name = "lblSource", ;
		TabIndex = 20, ;
		Top = 156, ;
		Width = 36, ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pgfIntelliSenseEditor.pagCommand.lblTimestamp' AS label WITH ;
		Anchor = 6, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Timestamp", ;
		FontName = "Segoe UI", ;
		Left = 6, ;
		Name = "lblTimestamp", ;
		TabIndex = 17, ;
		Top = 157, ;
		Width = 60, ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pgfIntelliSenseEditor.pagCommand.lblTip' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Tip", ;
		FontName = "Segoe UI", ;
		Left = 6, ;
		Name = "lblTip", ;
		TabIndex = 15, ;
		Top = 110, ;
		Width = 17, ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pgfIntelliSenseEditor.pagCommand.lblType' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Type", ;
		FontName = "Segoe UI", ;
		Left = 6, ;
		Name = "lblType", ;
		TabIndex = 1, ;
		Top = 8, ;
		Width = 26, ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pgfIntelliSenseEditor.pagCommand.lblUniqueid' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "UniqueID", ;
		FontName = "Segoe UI", ;
		Left = 6, ;
		Name = "lblUniqueid", ;
		TabIndex = 11, ;
		Top = 60, ;
		Width = 49, ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pgfIntelliSenseEditor.pagCommand.lblUser' AS label WITH ;
		Anchor = 6, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "User", ;
		FontName = "Segoe UI", ;
		Height = 17, ;
		Left = 6, ;
		Name = "lblUser", ;
		TabIndex = 22, ;
		Top = 217, ;
		Width = 23, ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pgfIntelliSenseEditor.pagCommand.txtAbbrev' AS textbox WITH ;
		ControlSource = "foxcode.abbrev", ;
		FontName = "Segoe UI", ;
		Height = 23, ;
		Left = 183, ;
		MaxLength = 24, ;
		Name = "txtAbbrev", ;
		TabIndex = 4, ;
		Top = 26, ;
		Width = 177
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'pgfIntelliSenseEditor.pagCommand.txtCmd' AS textbox WITH ;
		ControlSource = "foxcode.cmd", ;
		FontName = "Segoe UI", ;
		Height = 23, ;
		Left = 608, ;
		MaxLength = 15, ;
		Name = "txtCmd", ;
		TabIndex = 8, ;
		Top = 26, ;
		Width = 115
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'pgfIntelliSenseEditor.pagCommand.txtExpanded' AS textbox WITH ;
		ControlSource = "foxcode.expanded", ;
		FontName = "Segoe UI", ;
		Height = 23, ;
		Left = 387, ;
		MaxLength = 26, ;
		Name = "txtExpanded", ;
		TabIndex = 6, ;
		Top = 26, ;
		Width = 191
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'pgfIntelliSenseEditor.pagCommand.txtTimestamp' AS textbox WITH ;
		Anchor = 6, ;
		ControlSource = "foxcode.timestamp", ;
		FontName = "Segoe UI", ;
		Height = 23, ;
		Left = 6, ;
		Name = "txtTimestamp", ;
		TabIndex = 19, ;
		Top = 174, ;
		Width = 141
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'pgfIntelliSenseEditor.pagCommand.txtUniqueid' AS textbox WITH ;
		ControlSource = "foxcode.uniqueid", ;
		FontName = "Segoe UI", ;
		Height = 23, ;
		Left = 6, ;
		MaxLength = 10, ;
		Name = "txtUniqueid", ;
		TabIndex = 13, ;
		Top = 78, ;
		Width = 108
		*< END OBJECT: BaseClass="textbox" />
	
	PROCEDURE Activate
		SELECT foxcode
		this.Refresh()
		RETURN 
	ENDPROC

	PROCEDURE addrow		&& This method is called to add a row to the base table.
		LOCAL loException AS Exception , ;
		      lcCode
		
		TRY 
		   APPEND BLANK IN foxcode
		   REPLACE timestamp WITH DATETIME(), ;
		           uniqueid  WITH SYS(2015), ;
		           case      WITH this.LookupDefaultCase(), ;
		           save      WITH .T. ;
		      IN foxcode
		   
		   this.lblPendingChangesFile.Visible = .T.
		   this.Refresh()
		
		   * TGL 11/24/14: Doing two adds in a row, the grid sometimes does
		   * not show the current record. Add this to force a grid update. 
		   thisform.grdFoxcode.SetFocus()
		   thisform.cmdAdd.SetFocus()
		   	
		CATCH TO loException
		   lcCode = "Error duplicating row: " + m.loException.Message + ;
		            " [" + TRANSFORM(m.loException.Details) + "] " + ;
		            " (" + TRANSFORM(m.loException.ErrorNo) + ")" + ;
		            " in " + m.loException.Procedure + ;
		            " on " + TRANSFORM(m.loException.LineNo)
		
		   MESSAGEBOX(lcCode, ;
		              0+48, ;
		              this.Caption)
		 
		ENDTRY
		
		RETURN 
	ENDPROC

	PROCEDURE backupintellisense		&& This method is called to backup the base table.
		******************************************************************************************
		*  METHOD: BackupIntelliSense
		*
		*  AUTHOR: Richard A. Schummer, September 2014
		*
		*  METHOD DESCRIPTION:
		*     Copies the production IntelliSense table (FoxCode.DBF) and makes a backup of the
		*     file with "_Backup_" and an integer so developers can make numerous backups of 
		*     the file.
		*
		*  INPUT PARAMETERS:
		*     tcBackupTable - character, tablename of backup file name. If not passed in, 
		*                     it defaults to the name of the FoxCode table with _Backup_ and 
		*                     integer. If passed in, uses this character string.
		*
		*  OUTPUT PARAMETERS:
		*     llSuccess = logical, true when the code runs fine, false if the code fails
		*
		******************************************************************************************
		 
		LPARAMETERS tcBackupTable
		
		LOCAL lcAlias, ;
		      lcBackupTable, ;
		      lcFileName, ;
		      lcOldSafety, ;
		      llNoBackup, ;
		      llSuccess, ;
		      lnFileCnt, ;
		      lnSelect, ;
		      loException AS Exception
		
		lnSelect      = SELECT()
		llSuccess     = .T.
		lcBackupTable = m.tcBackupTable
		lcAlias       = "FoxCode"
		lcFileName    = LOWER(_foxcode)
		
		* No file name passed into the procedure
		IF VARTYPE(m.lcBackupTable) <> 'C' OR EMPTY(m.lcBackupTable)
		   lnFileCnt     = 0
		   
		   DO WHILE .T.
		      lnFileCnt = m.lnFileCnt + 1
		      lcBackupTable = ADDBS(JUSTPATH(lcFileName)) + JUSTSTEM(lcFileName) + "_Backup_" + TRANSFORM(m.lnFileCnt) + ".dbf"
		      
		      IF FILE(m.lcBackupTable)
		         * Continue until file not found.
		      ELSE 
		         EXIT 
		      ENDIF 
		   ENDDO
		ENDIF
		
		lcOldSafety = SET("SAFETY")
		SET SAFETY OFF
		
		llNoBackup = .F.
		
		TRY
		   USE IN (SELECT("FoxCodeProduction"))
		   USE (lcFileName) ALIAS FoxCodeProduction IN 0 SHARED AGAIN
		   SELECT FoxCodeProduction
		   COPY TO (m.lcBackupTable) WITH PRODUCTION
		   MESSAGEBOX("IntelliSense file backed up to: " + m.lcBackupTable, ;
		              0+64, ;
		              this.Caption)
		   
		CATCH to loException
		   lcBackupTable = SPACE(0)
		   llNoBackup    = .T.
		   
		   lcCode = "Error: " + m.loException.Message + ;
		            IIF(EMPTY(TRANSFORM(m.loException.Details)), ;
		                     SPACE(0), ;
		                     " [" + TRANSFORM(m.loException.Details) + "] ") + ;
		            " (" + TRANSFORM(m.loException.ErrorNo) + ")" + ;
		            " in " + m.loException.Procedure + ;
		            " on " + TRANSFORM(m.loException.LineNo)
		
		   MESSAGEBOX(lcCode, ;
		              0+48, ;
		              this.Caption)
		 
		ENDTRY
		
		* In case the file parameter is passed in by reference
		tcBackupTable = m.lcBackupTable
		
		USE IN (SELECT("FoxCodeProduction"))
		
		SET SAFETY &lcOldSafety
		
		SELECT (lnSelect)
		
		RETURN llSuccess
		 
	ENDPROC

	PROCEDURE browse2ndcopytable		&& This methiod is called to browse a second copy of the base table to look for example code.
		LOCAL loException as Exception, ;
		      lcCode
		
		TRY 
		   USE IN (SELECT("foxcodeexamples"))
		   USE foxcode IN 0 SHARED AGAIN ALIAS foxcodeexamples 
		   
		   SELECT foxcodeexamples
		   SET FILTER TO (!EMPTY(user) AND UPPER(type) <> "V") IN foxcodeexamples
		   BROWSE LAST NOCAPTIONS NOWAIT 
		   
		CATCH TO loException
		   lcCode = "Error: " + m.loException.Message + ;
		            " [" + TRANSFORM(m.loException.Details) + "] " + ;
		            " (" + TRANSFORM(m.loException.ErrorNo) + ")" + ;
		            " in " + m.loException.Procedure + ;
		            " on " + TRANSFORM(m.loException.LineNo)
		
		   MESSAGEBOX(lcCode, ;
		              0+48, ;
		              this.Caption)
		 
		
		ENDTRY
		
		
		RETURN 
	ENDPROC

	PROCEDURE browsetable		&& This method is called to browse all the fields in the base table.
		BROWSE LAST NOCAPTIONS 
		
		this.ChangeRow()
		this.pgfIntelliSenseEditor.pagCommand.cboType.Setfocus()
		
		RETURN 
	ENDPROC

	PROCEDURE buildtmpfoxcode		&& Build the TmpFoxCode table, set it as _FoxCode
		* Todd Landrun 29-Oct-2014, Needed for the Test button 
		* Create a temporary FoxCode table and have intellisense use that so that  our
		* form can use the real FoxCode table buffered without any interfence. 
		
		_FoxCode = ""
		
		DELETE FILE TmpFoxCode.dbf
		DELETE FILE TmpFoxCode.fpt
		   
		SELECT *;
		  FROM FoxCode;
		  WHERE !DELETED();
		  INTO TABLE TmpFoxCode
		   
		SELECT TmpFoxCode
		USE
		
		_FoxCode = "TmpFoxCode"   
		
		RETURN .t.
	ENDPROC

	PROCEDURE cexportfilename_assign
		LPARAMETERS tcExportFileName
		this.cExportFileName = FORCEEXT(tcExportFileName, "dbf")
		RETURN
		
	ENDPROC

	PROCEDURE changerow		&& This method is called when a row is changed in the base table.
		lcChangeState = GETFLDSTATE(-1, "foxcode")
		
		TRY 
		   IF "2" $ lcChangeState OR "3" $ lcChangeState OR "4" $ lcChangeState
		      this.lblPendingChangesRecord.Visible = .T.
		      this.lblPendingChangesFile.Visible   = .T.
		   ELSE 
		      this.lblPendingChangesRecord.Visible = .F.
		   ENDIF 
		
		CATCH TO loException
		   * Might fail depending on timing when this routine is called. Don't message
		   * when error is triggered.
		   
		ENDTRY
		
		RETURN
	ENDPROC

	PROCEDURE csortorder_assign
		LPARAMETERS tcSortOrder
		
		this.cSortOrder = tcSortOrder
		
		DO CASE
		   CASE LOWER(this.cSortOrder) =  LOWER("Type and Abbreviation")
		      SET ORDER TO 1 IN FoxCode
		
		   CASE LOWER(this.cSortOrder) =  LOWER("Type and Expanded")
		      SET ORDER TO 2 IN FoxCode
		
		   OTHERWISE
		      SET ORDER TO 0 IN FoxCode
		
		ENDCASE
		
		thisform.Refresh()
		
		RETURN
	ENDPROC

	PROCEDURE Deactivate
		ACTIVATE SCREEN 
		RETURN 
	ENDPROC

	PROCEDURE Destroy
		LOCAL loException AS Exception 
		
		IF this.IsThorInstalled()
			this.oSettings.Save(this)
			this.oSettings = .Null.
		ENDIF  
		
		TRY 
		   UNBINDEVENTS(this.pgfIntelliSenseEditor.pagCommand.txtAbbrev, "LostFocus", this, "ChangeRow")
		   UNBINDEVENTS(this.pgfIntelliSenseEditor.pagCommand.txtExpanded, "LostFocus", this, "ChangeRow")
		   UNBINDEVENTS(this.pgfIntelliSenseEditor.pagCommand.txtCmd, "LostFocus", this, "ChangeRow")
		   UNBINDEVENTS(this.pgfIntelliSenseEditor.pagCommand.cboCase, "LostFocus", this, "ChangeRow")
		   UNBINDEVENTS(this.pgfIntelliSenseEditor.pagCommand.chkSave, "LostFocus", this, "ChangeRow")
		   UNBINDEVENTS(this.pgfIntelliSenseEditor.pagCommand.txtUniqueId, "LostFocus", this, "ChangeRow")
		   UNBINDEVENTS(this.pgfIntelliSenseEditor.pagCommand.edtTip, "LostFocus", this, "ChangeRow")
		   UNBINDEVENTS(this.pgfIntelliSenseEditor.pagCommand.edtData, "LostFocus", this, "ChangeRow")
		   UNBINDEVENTS(this.pgfIntelliSenseEditor.pagCommand.txtTimeStamp, "LostFocus", this, "ChangeRow")
		   UNBINDEVENTS(this.pgfIntelliSenseEditor.pagCommand.edtSource, "LostFocus", this, "ChangeRow")
		   UNBINDEVENTS(this.pgfIntelliSenseEditor.pagCommand.edtUser, "LostFocus", this, "ChangeRow")
		
		CATCH TO loException
		
		ENDTRY
		
		* In case separate browse window remains open
		USE IN (SELECT("foxcodeexamples"))
		
		RETURN 
	ENDPROC

	PROCEDURE duplicaterow		&& This method is called to duplicate a row in the base table.
		LOCAL loData, ;
		      loException AS Exception , ;
		      lcCode
		
		TRY
		   SELECT foxcode
		   SCATTER MEMO NAME loData
		   INSERT INTO foxcode FROM NAME loData
		
		   REPLACE timestamp WITH DATETIME(), ;
		           uniqueid  WITH SYS(2015) ;
		      IN foxcode
		   
		   this.lblPendingChangesFile.Visible = .T.
		   this.Refresh()
		
		CATCH TO loException
		   lcCode = "Error duplicating row: " + m.loException.Message + ;
		            " [" + TRANSFORM(m.loException.Details) + "] " + ;
		            " (" + TRANSFORM(m.loException.ErrorNo) + ")" + ;
		            " in " + m.loException.Procedure + ;
		            " on " + TRANSFORM(m.loException.LineNo)
		
		   MESSAGEBOX(lcCode, ;
		              0+48, ;
		              this.Caption)
		 
		ENDTRY
		
		RETURN 
	ENDPROC

	PROCEDURE exportrecords		&& This method is called to export the records from the base table to a free table.
		LOCAL lcOldSafety, ;
		      lcExportCriteria, ;
		      lcExportFile
		
		Set Talk Off
		Set Echo Off 
		      
		IF EMPTY(thisform.cExportFileName)
		   * Nothing to do
		ELSE
		   TRY 
		      lnOldSelect = SELECT()
		      
		      USE IN (SELECT("foxcodeproduction"))
		      USE (_foxcode) IN 0 SHARED AGAIN ALIAS foxcodeproduction
		      
		      SELECT foxcodeproduction 
		      
		      lcOldSafety = SET("Safety")
		      SET SAFETY OFF 
		   
		      lcExportCriteria = ALLTRIM(this.cExportCriteria)
		      lcExportFile     = ALLTRIM(this.cExportFileName)
		      
		      COPY TO (this.cExportFileName) FOR &lcExportCriteria TYPE FOX2X 
		      
		      USE (this.cExportFileName) IN 0 SHARED AGAIN ALIAS curExport
		      
		      WAIT WINDOW TRANSFORM(RECCOUNT("curExport")) + " IntelliSense records exported." NOWAIT
		   
		      SET SAFETY &lcOldSafety
		
		      USE IN (SELECT("foxcodeproduction"))
		      USE IN (SELECT("curExport"))
		
		      SELECT (lnOldSelect)
		            
		   CATCH TO loException
		      lcCode = "Export error: " + m.loException.Message + ;
		               " [" + TRANSFORM(m.loException.Details) + "] " + ;
		               " (" + TRANSFORM(m.loException.ErrorNo) + ")" + ;
		               " in " + m.loException.Procedure + ;
		               " on " + TRANSFORM(m.loException.LineNo)
		
		      MESSAGEBOX(lcCode, ;
		                 0+48, ;
		                 this.Caption)
		 
		   ENDTRY
		ENDIF 
		
		RETURN 
	ENDPROC

	PROCEDURE Init
		********************************************************************************
		*  METHOD NAME: Init
		*
		*  AUTHOR: Richard A. Schummer, July 2014
		*
		*  METHOD DESCRIPTION:
		*    This intrinsic method is used to initialize (or not) the form.
		*    
		*
		*  INPUT PARAMETERS:
		*    None
		* 
		*  OUTPUT PARAMETERS:
		*    None
		* 
		********************************************************************************
		
		ThisForm.RestorePersistentProperties()
		
		this.cEditorFileName = FORCEPATH(this.cEditorFileName, SYS(2023))
		
		IF this.lIntellisenseTableOpen
		   BINDEVENT(this.pgfIntelliSenseEditor.pagCommand.txtAbbrev, "LostFocus", this, "ChangeRow")
		   BINDEVENT(this.pgfIntelliSenseEditor.pagCommand.txtExpanded, "LostFocus", this, "ChangeRow")
		   BINDEVENT(this.pgfIntelliSenseEditor.pagCommand.txtCmd, "LostFocus", this, "ChangeRow")
		   BINDEVENT(this.pgfIntelliSenseEditor.pagCommand.cboCase, "LostFocus", this, "ChangeRow")
		   BINDEVENT(this.pgfIntelliSenseEditor.pagCommand.chkSave, "LostFocus", this, "ChangeRow")
		   BINDEVENT(this.pgfIntelliSenseEditor.pagCommand.txtUniqueId, "LostFocus", this, "ChangeRow")
		   BINDEVENT(this.pgfIntelliSenseEditor.pagCommand.edtTip, "LostFocus", this, "ChangeRow")
		   BINDEVENT(this.pgfIntelliSenseEditor.pagCommand.edtData, "LostFocus", this, "ChangeRow")
		   BINDEVENT(this.pgfIntelliSenseEditor.pagCommand.txtTimeStamp, "LostFocus", this, "ChangeRow")
		   BINDEVENT(this.pgfIntelliSenseEditor.pagCommand.edtSource, "LostFocus", this, "ChangeRow")
		   BINDEVENT(this.pgfIntelliSenseEditor.pagCommand.edtUser, "LostFocus", this, "ChangeRow")
		ENDIF 
		
		this.Caption = this.Caption + SPACE(1) + this.cVersion
		
		RETURN this.lIntellisenseTableOpen
		
	ENDPROC

	PROCEDURE isthorinstalled
		Return Type("_Screen.cThorDispatcher") = 'C' and not Empty(_Screen.cThorDispatcher)
	ENDPROC

	PROCEDURE Load
		LOCAL loException AS Exception, ;
		      lnTags, ;
		      lcTagOrder, ;
		      lcDefaultTagOrder
		
		TRY 
		   *< SET DELETED OFF 
		   SET MULTILOCKS ON 
		   USE (_foxcode) IN 0 SHARED AGAIN ALIAS Foxcode
		   This.cSortOrder = This.cSortOrder
		
		   * Todd Landrun 29-Oct-2014, Needed for the Test button 
		   * Create a temporary FoxCode table and have intellisense use that so that  our
		   * form can use the real FoxCode table buffered without any interfence. 
		   thisform.cHoldFoxCodePath = _FoxCode
		   thisform.BuildTmpFoxCode()
		   
		
		   
		CATCH TO loException
		   this.lIntellisenseTableOpen = .F.
		   
		   MESSAGEBOX("Error: " + m.loException.Message + ;
		              " (" + TRANSFORM(m.loException.ErrorNo) + ")" + ;
		              " in " + m.loException.Procedure + ;
		              " on " + TRANSFORM(m.loException.LineNo) + ; 
		              CHR(13) + CHR(13) + ;
		              this.Caption + " cannot open IntelliSense metadata, please fix and try again.", ;
		              0+16, ;
		              _screen.Caption)
		
		ENDTRY
		
		IF this.lIntellisenseTableOpen
		   TRY 
		      IF this.IsThorInstalled()
		         
		      ELSE 
		         *** JRN 10/19/2014 : Set order to UPPER(TYPE+ABBREV)
		         SET ORDER TO 1 IN FoxCode
		         GOTO TOP IN FoxCode
		         this.cSortOrder       = "Type and Abbreviation" 
		         this.lShowDeletedRows = .T.
		      ENDIF 
		      
		      CURSORSETPROP("Buffering", 5, "FoxCode")
		         
		   CATCH TO loException
		      MESSAGEBOX("Error: " + m.loException.Message + ;
		                 " (" + TRANSFORM(m.loException.ErrorNo) + ")" + ;
		                 " in " + m.loException.Procedure + ;
		                 " on " + TRANSFORM(m.loException.LineNo) + ; 
		                 CHR(13) + CHR(13) + ;
		                 this.Caption + " trying to set order and deleted properties, but is having difficulty.", ;
		                 0+64, ;
		                 _screen.Caption)
		
		   ENDTRY
		
		   TRY 
		      *{ RAS 26-Oct-2014, Adding sorting dropdown via array
		      lnTags = ATAGINFO(laCDX, "", "FoxCode")
		
		      * Add a row for "natural order"
		      DIMENSION this.aTags[ALEN(laCDX, 1)+ 1, ALEN(laCDX, 2)]
		
		      ACOPY(laCDX, this.aTags)
		
		      * Add some tag names since VFP is leaving them blank
		      * If these are changed, please see cSortOrder_Assign() code.
		      this.aTags[1, 1] = "Type and Abbreviation"
		      this.aTags[2, 1] = "Type and Expanded"
		      this.aTags[3, 1] = "Natural Order"
		
		      *} RAS 26-Oct-2014, end of changes for sorting dropdown via array
		
		      DIMENSION this.aCases[6,2]
		
		      this.aCases[1,2] = "U"
		      this.aCases[1,1] = "UPPERCASE"
		
		      this.aCases[2,2] = "L"
		      this.aCases[2,1] = "lowercase"
		
		      this.aCases[3,2] = "M"
		      this.aCases[3,1] = "Mixed Case (M)"
		
		      this.aCases[4,2] = " "
		      this.aCases[4,1] = "Mixed Case (empty)"
		
		      this.aCases[5,2] = "P"
		      this.aCases[5,1] = "Proper case"
		
		      this.aCases[6,2] = "X"
		      this.aCases[6,1] = "Unchanged"
		
		      ASORT(this.aCases, 1)
		
		
		      DIMENSION this.aTypes[11, 2]
		
		      this.aTypes[1, 2] = "C"   
		      this.aTypes[1, 1] = "Command"
		
		      this.aTypes[2, 2] = "E"   
		      this.aTypes[2, 1] = "Property Editor"
		
		      this.aTypes[3, 2] = "F"   
		      this.aTypes[3, 1] = "Function"
		
		      this.aTypes[4, 2] = "M"   
		      this.aTypes[4, 1] = "Menuhit"
		
		      this.aTypes[5, 2] = "O" 
		      this.aTypes[5, 1] = "COM"   
		
		      this.aTypes[6, 2] = "P"
		      this.aTypes[6, 1] = "Property"
		
		      this.aTypes[7, 2] = "S"   
		      this.aTypes[7, 1] = "Script"
		
		      this.aTypes[8, 2] = "T"   
		      this.aTypes[8, 1] = "Object Type"
		
		      this.aTypes[9, 2] = "U"
		      this.aTypes[9, 1] = "User"
		
		      this.aTypes[10, 2] = "V"   
		      this.aTypes[10, 1] = "Version"
		
		      this.aTypes[11, 2] = "Z"   
		      this.aTypes[11, 1] = "Special"
		
		      ASORT(this.aTypes, 1)
		
		   CATCH TO loException
		
		      MESSAGEBOX("Error: " + m.loException.Message + ;
		                 " (" + TRANSFORM(m.loException.ErrorNo) + ")" + ;
		                 " in " + m.loException.Procedure + ;
		                 " on " + TRANSFORM(m.loException.LineNo) + ; 
		                 CHR(13) + CHR(13) + ;
		                 this.Caption + " is having difficulty setting up generic arrays used for settings and dropdowns.", ;
		                 0+48, ;
		                 _screen.Caption)
		
		   ENDTRY
		ENDIF 
		
		RETURN 
	ENDPROC

	PROCEDURE lookupdefaultcase		&& This method is called to look up the default case for IntelliSense as selected by the developer.
		LOCAL lnOldSelect, ;
		      lcReturnVal
		
		lnOldSelect = SELECT()
		
		SELECT * ;
		   FROM foxcode ;
		   WHERE type = "V" ;
		   INTO CURSOR curFoxCode
		   
		IF RECCOUNT("curFoxCode") > 0
		   lcReturnVal = curFoxCode.Case
		ELSE
		   lcReturnVal = SPACE(1)
		ENDIF 
		
		USE IN (SELECT("curFoxCode"))
		
		SELECT (lnOldSelect)
		
		RETURN lcReturnVal
	ENDPROC

	PROCEDURE lshowdeletedrows_assign
		LPARAMETERS tlShowDeletedRows
		
		LOCAL loException AS Exception
		
		this.lShowDeletedRows = tlShowDeletedRows
		
		IF this.lShowDeletedRows 
		   SET DELETED OFF 
		ELSE
		   SET DELETED ON 
		ENDIF 
		
		TRY 
		   SKIP +1 IN FoxCode
		   SKIP -1 IN FoxCode
		   
		   DO CASE
		      CASE EOF("FoxCode")
		         GO BOTTOM IN FoxCode
		
		      CASE BOF("FoxCode")
		         GO TOP IN FoxCode
		
		      OTHERWISE
		         * Stay put where you are
		         
		   ENDCASE
		CATCH TO loException
		   * Nothing to do here
		   
		ENDTRY
		
		this.Refresh()
		
		RETURN
		
	ENDPROC

	PROCEDURE QueryUnload
		LOCAL lnResult, ;
		      llReturnVal
		      
		llReturnVal = .T.
		
		IF this.lblPendingChangesFile.Visible
		   lnResult = MESSAGEBOX("Do you want to save pending changes?", 4+32, thisform.Caption)
		   
		   IF lnResult = 6
		      IF thisform.SaveTable()
		         * Nothing else to do
		      ELSE 
		         MESSAGEBOX("Unable to commit the changes!", 0+48, thisform.Caption)
		         llReturnVal = .F.
		      ENDIF 
		   ELSE
		      IF thisform.RevertTable()
		         * Nothing else to do
		      ELSE 
		         MESSAGEBOX("Unable to reverse the changes!", 0+48, thisform.Caption)
		         llReturnVal = .F.
		      ENDIF 
		   ENDIF 
		ELSE
		   RELEASE thisform
		ENDIF 
		
		RETURN llReturnVal
	ENDPROC

	PROCEDURE Refresh
		this.ChangeRow()
		RETURN 
	ENDPROC

	PROCEDURE removerow		&& This method is called to remove a row in the base table.
		LOCAL lcCode
		
		TRY 
		   DELETE IN foxcode
		   
		   this.lblPendingChangesFile.Visible = .T.
		   
		   SKIP +1 IN foxcode
		   
		   IF EOF("foxcode")
		      GO BOTTOM IN foxcode
		   ENDIF 
		
		CATCH TO loException
		   lcCode = "Error duplicating row: " + m.loException.Message + ;
		            " [" + TRANSFORM(m.loException.Details) + "] " + ;
		            " (" + TRANSFORM(m.loException.ErrorNo) + ")" + ;
		            " in " + m.loException.Procedure + ;
		            " on " + TRANSFORM(m.loException.LineNo)
		
		   MESSAGEBOX(lcCode, ;
		              0+48, ;
		              this.Caption)
		
		FINALLY 
		   this.Refresh()
		      
		ENDTRY
		
		RETURN 
	ENDPROC

	PROCEDURE restorepersistentproperties
		Local lcPersistedProperties 
		
		TEXT TO lcPersistedProperties NOSHOW TEXTMERGE
		Top
		Left
		Width
		Height
		cEditorFileName
		cExportCriteria
		cExportFileName
		cSearchFilter
		cSignature
		cSortOrder
		cTypeFilter
		lShowDeletedRows
		ENDTEXT
			
		lcPersistedProperties = Strtran(lcPersistedProperties, chr[13] + chr[10], ', ')
		
		If This.IsThorInstalled()
			* ThorFormSettings home page = http://vfpx.codeplex.com/wikipage?title=Thor%20Framework%20FormSettings
			Local loSettings as Thor_Form_Settings of 'C:\USERS\JIM NELSON\DROPBOX\VFP UTILITIES\MYTHOR\Thor\Source\Thor_FoxResource.vcx'
			This.oSettings = Execscript (_Screen.cThorDispatcher, 'class= ThorFormSettings', 'Hack Intellisense')
			This.oSettings.Restore(Thisform, lcPersistedProperties)
		    This.cSortOrder = This.cSortOrder && ensures sort order is set properly
		    This.cntSearchFilter.txtSearch.Value = This.cSearchFilter
			This.SetFilter()
		EndIf 
		
	ENDPROC

	PROCEDURE reverttable		&& This method is called to reverse out all the changes to the base table.
		LOCAL loException as Exception, ;
		      lnRows
		
		TRY 
		   lnRows = TABLEREVERT(.T., "foxcode")
		   
		   * RAS 19-Nov-2014, added to cover condition that last record was added to bottom and 
		   * reverting changes positions the cursor at EOF().
		   IF EOF("foxcode")
		      GO BOTTOM IN foxcode
		   ENDIF 
		   
		   this.lblPendingChangesRecord.Visible = .F.
		   this.lblPendingChangesFile.Visible   = .F.
		   this.Refresh()
		   
		   WAIT WINDOW TRANSFORM(lnRows) + " item" + IIF(lnRows = 1, SPACE(0), "s") + ;
		               " with changes have been reverted..." NOWAIT
		   
		CATCH TO loException
		   lcCode = "Error: " + m.loException.Message + ;
		            " [" + TRANSFORM(m.loException.Details) + "] " + ;
		            " (" + TRANSFORM(m.loException.ErrorNo) + ")" + ;
		            " in " + m.loException.Procedure + ;
		            " on " + TRANSFORM(m.loException.LineNo)
		
		   MESSAGEBOX(lcCode, ;
		              0+48, ;
		              _screen.Caption)
		 
		ENDTRY
		
		RETURN 
	ENDPROC

	PROCEDURE savetable		&& This method is called to commit all changes to the base table.
		LOCAL loException as Exception
		
		TRY 
		   llSuccess = TABLEUPDATE(.T., .T., "foxcode")
		
		   IF llSuccess
		      WAIT WINDOW "All changes have been committed..." NOWAIT
		      this.lblPendingChangesRecord.Refresh()
		      this.lblPendingChangesFile.Visible = .F.
		      
		   ELSE
		      MESSAGEBOX("The changes were not committed", 0+48, this.Caption)
		   ENDIF 
		
		CATCH TO loException
		   * Nothing special to handle.
		   
		ENDTRY
		
		RETURN 
	ENDPROC

	PROCEDURE setfilter
		* LOCATE FOR UPPER(abbrev) = UPPER(ALLTRIM(this.Value))
		Local cSearchFilter, cTypeFilter
		
		cSearchFilter = Alltrim(Thisform.cSearchFilter)
		cTypeFilter	  = This.cTypeFilter
		
		Do Case
			Case Empty(m.cSearchFilter) And m.cTypeFilter = '?'
				Set Filter To In Foxcode
			Case m.cTypeFilter = '?'
				Set Filter To Atc('&cSearchFilter', Abbrev + Expanded + Data + User) > 0 IN Foxcode
			Case Empty(m.cSearchFilter)
				Set Filter To Type = '&cTypeFilter' IN Foxcode
			Otherwise
				Set Filter To Atc('&cSearchFilter', Abbrev + Expanded + Data + User) > 0 And Type = '&cTypeFilter' IN Foxcode
		Endcase
		
		GO TOP IN foxcode
		
		*IF FOUND()
		Thisform.Refresh()
		*ENDIF
		
		RETURN 
		
	ENDPROC

	PROCEDURE texteditdata		&& This method is called to bring up program editor for the Data memo in the base table.
		LPARAMETERS toObject
		
		LOCAL lcOldSafety, ;
		      lcOldContents, ;
		      lcNewContents
		
		lcOldSafety = SET("Safety")
		SET SAFETY OFF
		
		IF DIRECTORY(JUSTPATH(this.cEditorFileName))
		   * Nothing to do
		ELSE
		   * Developer was asked once during configuration and on 
		   * setup, create it here if they did not previous, otherwise 
		   * it will trigger an error.
		   MD (JUSTPATH(this.cEditorFileName))
		ENDIF
		
		IF ISNULL(toObject)
		   * Nothing to do
		ELSE
		   * Get buffered contents from object.
		   lcOldContents = toObject.Value
		   STRTOFILE(lcOldContents, this.cEditorFileName)
		   MODIFY COMMAND (this.cEditorFileName)
		   lcNewContents = FILETOSTR(this.cEditorFileName)
		   
		   IF lcNewContents # lcOldContents
		      REPLACE (toObject.ControlSource) WITH lcNewContents ;
		         IN foxcode
		      toObject.Refresh()
		   ENDIF
		ENDIF
		
		DELETE FILE (this.cEditorFileName)
		SET SAFETY &lcOldSafety
		
		this.ChangeRow()
		
		RETURN
	ENDPROC

	PROCEDURE Unload
		DODEFAULT()
		
		TRY
		
		   * Todd Landrun 29-Oct-2014, Put _FoxCode back on the real
		   * FoxCode table and delete the Tmp table that was created
		
			_FoxCode = thisform.cHoldFoxCodePath 
		
			DELETE FILE TmpFoxCode.dbf
			DELETE FILE TmpFoxCode.fpt
			DELETE FILE TmpTestAbbrev.prg
			
		CATCH TO loException
		   this.lIntellisenseTableOpen = .F.
		   
		   MESSAGEBOX("Error: " + m.loException.Message + ;
		              " (" + TRANSFORM(m.loException.ErrorNo) + ")" + ;
		              " in " + m.loException.Procedure + ;
		              " on " + TRANSFORM(m.loException.LineNo) + ; 
		              CHR(13) + CHR(13) + ;
		              this.Caption + " error during the unload.", ;
		              0+16, ;
		              _screen.Caption)
		
		ENDTRY
			
	ENDPROC

	PROCEDURE zzabout		&& This method is for the form's documentation and copyright.
		******************************************************************************************
		*  FORM: frmIntelliSenseEditor.SCX
		*
		*  AUTHOR: Richard A. Schummer, July 2014
		*
		*  COPYRIGHT © 2014   All Rights Reserved.
		*     White Light Computing, Inc.
		*     PO Box 391
		*     Washington Twp., MI  48094
		*     raschummer@whitelightcomputing.com
		*
		*  PROGRAM DESCRIPTION:
		*     This tool is designed to more effectively modify existing and creating new 
		*     IntelliSense scripts. 
		*
		*     Features include
		*      - Searching for records by locating near matches for the Abbrev column
		*      - Generic filtering capability.
		*      - Backing up the IntelliSense table in case changes you make break the functionality.
		*      - Duplicating rows so you can create new features based on existing ones.
		*      - All changes are buffered with ability to reverse the changes before committing them.
		*      - New records added get unique UniqueID (SYS(2015)), current Timestamp, and the Save column set to true.
		*      - Right-clicking on Data brings up code in Visual FoxPro program editor with full IntelliSense (makes sense right?).
		*      - Comboboxes for record Type and Case columns.
		*      - Shows deleted rows in the table.
		*      - Export the records from the FoxCode table based on filter condition to allow developers to share features.
		*      - BROWSE all records like you normally did before the tool was developed.
		*     
		*     Features on enhancement list:
		*      - Only show fields appropriate for the record type.
		*      - Assist developers with code templates for common scenarios.
		*      - Detailed help for each column to assist developers in creating functionality.
		*      - Possible suggestions from the developer community.
		*
		*  EXPLICIT LICENSE:
		*     VFPX: http://vfpx.codeplex.com/license 
		*
		*  CALLING SYNTAX:
		*     DO FORM WLCIntelliSenseEditor.SCX
		*
		*  INPUT PARAMETERS:
		*     None
		*
		*  OUTPUT PARAMETERS:
		*     None
		*
		*  TABLES ACCESSED:
		*     FoxCode: VFP IntelliSense metadata, generally found in HOME(7) folder.
		* 
		*  GLOBAL PROCEDURES REQUIRED:
		*     None
		* 
		*  CODING STANDARDS:
		*     Version 5.2 compliant with no exceptions
		*  
		*  TEST INFORMATION:
		*     None
		*   
		*  SPECIAL REQUIREMENTS/DEVICES:
		*     None
		*
		*  FUTURE ENHANCEMENTS:
		*     None
		*
		*  LANGUAGE/VERSION:
		*     Visual FoxPro 09.00.0000.7423 or higher
		* 
		******************************************************************************************
		*                             C H A N G E    L O G                              
		*
		*    Date     Developer               Version  Description
		* ----------  ----------------------  -------  -------------------------------------------
		* 07/01/2014  Richard A. Schummer     1.0      Created tool
		* ----------------------------------------------------------------------------------------
		* 10/19/2014  Jim Nelson              1.1      Integrated with Thor components and repository
		* ----------------------------------------------------------------------------------------
		* 10/20/2014  Eric Selje              1.2      Better searching and filtering
		* ----------------------------------------------------------------------------------------
		* 10/26/2014  Richard A. Schummer     1.3      Added sorting, fixed filtering bug
		* ----------------------------------------------------------------------------------------
		* 10/26/2014  Todd Landrum            1.4      Added Test button. 
		* ----------------------------------------------------------------------------------------
		*
		******************************************************************************************
		
	ENDPROC

	PROCEDURE cmdAdd.Click
		thisform.AddRow()
		thisform.pgfIntelliSenseEditor.pagCommand.cboType.SetFocus()
		RETURN 
	ENDPROC

	PROCEDURE cmdBackupIntelliSense.Click
		thisform.BackupIntelliSense()
		RETURN 
	ENDPROC

	PROCEDURE cmdBrowse.Click
		thisform.BrowseTable()
		thisform.Refresh()
		thisform.pgfIntelliSenseEditor.pagCommand.cboType.SetFocus()
		RETURN 
	ENDPROC

	PROCEDURE cmdClose.Click
		IF thisform.QueryUnload()
		   RELEASE thisform
		ENDIF 
		
		RETURN
	ENDPROC

	PROCEDURE cmdDuplicate.Click
		thisform.DuplicateRow()
		thisform.pgfIntelliSenseEditor.pagCommand.cboType.SetFocus()
		RETURN 
	ENDPROC

	PROCEDURE cmdExport.Click
		thisform.ctrExportFile.Visible = .T.
		thisform.ctrExportFile.edtExportCriteria.SetFocus()
		RETURN 
	ENDPROC

	PROCEDURE cmdRemove.Click
		thisform.RemoveRow()
		
		Thisform.cntSearchFilter.txtSearch.SetFocus()
		
		RETURN 
	ENDPROC

	PROCEDURE cmdReverseChanges.Click
		thisform.RevertTable()
		thisform.Buildtmpfoxcode()
		thisform.ChangeRow()
		RETURN 
	ENDPROC

	PROCEDURE cmdSaveChanges.Click
		thisform.SaveTable()
		thisform.BuildTmpFoxCode()
		thisform.ChangeRow()
		RETURN 
	ENDPROC

	PROCEDURE cntFoxCodeTableName.lblFoxCodeAlias.Refresh
		this.Caption = LOWER(FULLPATH(DBF("foxcode")))
		RETURN
	ENDPROC

	PROCEDURE cntSearchFilter.cboType.Init
		This.AddProperty('aTypes[1]')
		Dimension This.aTypes[1 + Alen(thisform.aTypes, 1), 2]
		This.aTypes[1, 2] = '?'
		This.aTypes[1, 1] = 'All'
		Acopy(Thisform.aTypes, This.aTypes, 1, -1, 3)
		
		This.RowSource = 'This.aTypes'
	ENDPROC

	PROCEDURE cntSearchFilter.cboType.Valid
		Thisform.SetFilter()
		RETURN 
	ENDPROC

	PROCEDURE cntSearchFilter.txtSearch.InteractiveChange
		Thisform.cSearchFilter = This.Value 
		Thisform.SetFilter()
		Return
		
	ENDPROC

	PROCEDURE ctrExportFile.cmdClose.Click
		this.Parent.Visible = .F.
		RETURN 
	ENDPROC

	PROCEDURE ctrExportFile.cmdExport.Click
		thisform.ExportRecords()
		this.Parent.Visible = .F.
		RETURN 
	ENDPROC

	PROCEDURE ctrExportFile.cmdPickFile.Click
		lcFilename = GETFILE("dbf")
		
		IF EMPTY(lcFileName)
		   * Nothing to do
		ELSE
		   thisform.cExportFileName = LOWER(lcFileName)
		   
		   this.Parent.txtExportFile.Refresh()
		ENDIF 
		
		RETURN 
	ENDPROC

	PROCEDURE grdFoxcode.AfterRowColChange
		LPARAMETERS nColIndex
		
		* Only refresh on row change
		IF this.RowColChange = 1 OR this.RowColChange = 3
		   thisform.Refresh()
		ENDIF
		
		RETURN 
	ENDPROC

	PROCEDURE grdFoxcode.Refresh
		* Comment so the Refresh method is called when bound events are fired.
		* DO NOT REMOVE!!!
	ENDPROC

	PROCEDURE lblAdd.Click
		this.Parent.cmdAdd.Click()
		RETURN 
	ENDPROC

	PROCEDURE lblAdd.MouseEnter
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		this.BorderStyle = 1
		DODEFAULT()
	ENDPROC

	PROCEDURE lblAdd.MouseLeave
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		this.BorderStyle = 0
		DODEFAULT()
	ENDPROC

	PROCEDURE lblDuplicate.Click
		this.Parent.cmdDuplicate.Click()
		RETURN 
	ENDPROC

	PROCEDURE lblDuplicate.MouseEnter
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		this.BorderStyle = 1
		DODEFAULT()
	ENDPROC

	PROCEDURE lblDuplicate.MouseLeave
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		this.BorderStyle = 0
		DODEFAULT()
	ENDPROC

	PROCEDURE lblRecordCounter.Refresh
		this.Caption = "On " + TRANSFORM(RECNO("FoxCode")) + " of " + TRANSFORM(RECCOUNT("FoxCode")) + " in the IntelliSense file"
		RETURN
	ENDPROC

	PROCEDURE lblRemove.Click
		this.Parent.cmdRemove.Click()
		RETURN 
	ENDPROC

	PROCEDURE lblRemove.MouseEnter
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		this.BorderStyle = 1
		DODEFAULT()
	ENDPROC

	PROCEDURE lblRemove.MouseLeave
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		this.BorderStyle = 0
		DODEFAULT()
	ENDPROC

	PROCEDURE lblReverse.Click
		this.Parent.cmdReverseChanges.Click()
		RETURN 
	ENDPROC

	PROCEDURE lblReverse.MouseEnter
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		this.BorderStyle = 1
		DODEFAULT()
	ENDPROC

	PROCEDURE lblReverse.MouseLeave
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		this.BorderStyle = 0
		DODEFAULT()
	ENDPROC

	PROCEDURE lblSave.Click
		this.Parent.cmdSaveChanges.Click()
		RETURN 
	ENDPROC

	PROCEDURE lblSave.MouseEnter
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		this.BorderStyle = 1
		DODEFAULT()
	ENDPROC

	PROCEDURE lblSave.MouseLeave
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		this.BorderStyle = 0
		DODEFAULT()
	ENDPROC

	PROCEDURE pgfIntelliSenseEditor.pagCommand.cboType.LostFocus
		thisform.grdFoxcode.colType.Refresh()
		thisform.ChangeRow()
		RETURN 
	ENDPROC

	PROCEDURE pgfIntelliSenseEditor.pagCommand.cboType.Valid
		DODEFAULT()
		this.Parent.cmdTest.Refresh()
	ENDPROC

	PROCEDURE pgfIntelliSenseEditor.pagCommand.cmdEdit.Click
		thisform.TextEditData(This.Parent.edtData)
		RETURN
	ENDPROC

	PROCEDURE pgfIntelliSenseEditor.pagCommand.cmdPastesignature.Click
		Local lcSignature
		
		* RAS 26-Oct-2014, wrapped in TRY...CATCH to make sure no error before the signature is set.
		TRY 
		   lcSignature = Thisform.cSignature
		
		   With This.Parent.edtUser
		      .Value = Left(.Value, .SelStart) + m.lcSignature + Substr(.Value, .SelStart + .SelLength)
		   Endwith
		
		CATCH TO loException
		   MESSAGEBOX("Please save the signature before trying to paste one here.", ; 
		              0+48 , ;
		              thisform.Caption)
		ENDTRY
		
		this.Parent.edtUser.SetFocus()
		this.Parent.edtUser.SelStart = LENC(this.Parent.edtUser.Value)
		
		RETURN 
		
	ENDPROC

	PROCEDURE pgfIntelliSenseEditor.pagCommand.cmdPastesignature.Init
		This.Visible = Thisform.IsThorInstalled()
	ENDPROC

	PROCEDURE pgfIntelliSenseEditor.pagCommand.cmdSaveassignature.Click
		Local lcSignature
		With This.Parent.edtUser
			If .SelLength = 0
				Thisform.cSignature = .Value
			Else
				Thisform.cSignature = Substr(.Value, .SelStart + 1, .SelLength)
			Endif
		Endwith
		
		Return
		
	ENDPROC

	PROCEDURE pgfIntelliSenseEditor.pagCommand.cmdSaveassignature.Init
		This.Visible = Thisform.IsThorInstalled()
	ENDPROC

	PROCEDURE pgfIntelliSenseEditor.pagCommand.cmdTest.Click
		* Todd Landrun 28-Oct-2014, added test button to test IntelliSense functionality
		LOCAL lcUniqueID, lcAbbrev, lcHoldFoxCode
		
		TRY 
		   * Hold onto the current record
		   lcUniqueID = FoxCode.Uniqueid
		   lcAbbrev   = ALLTRIM(FoxCode.Abbrev)
		   lcType     = UPPER(ALLTRIM(FoxCode.Type))
		   
		   * Add this record to the TmpFoxCode data so far. 
		   _FoxCode = ""
		
			USE IN 0 TmpFoxCode
			SELECT TmpFoxCode
			LOCATE FOR UniqueID = lcUniqueID
			IF !FOUND()
				APPEND BLANK
			ENDIF
		
			* Update the record to the one in the buffer
			SELECT FoxCode
			SCATTER MEMVAR MEMO
			SELECT TmpFoxCode
			GATHER MEMVAR MEMO
		
			* Close TmpFoxCode
			SELECT TmpFoxCode
			use
			_FoxCode = "TmpFoxCode"
			
		   * Test the current abbreviation
		   IF lcType = "F"
		      KEYBOARD lcAbbrev + '({SPACEBAR}'  
		   ELSE 
		      KEYBOARD lcAbbrev + '{SPACEBAR}'  
		   ENDIF 
		   
		   MODIFY COMMAND TmpTestAbbrev
			
		CATCH TO loException
		   lcCode = "Error: " + m.loException.Message + ;
		            " [" + TRANSFORM(m.loException.Details) + "] " + ;
		            " (" + TRANSFORM(m.loException.ErrorNo) + ")" + ;
		            " in " + m.loException.Procedure + ;
		            " on " + TRANSFORM(m.loException.LineNo)
		
		   MESSAGEBOX(lcCode, ;
		              0+48, ;
		              this.Caption)
		 
		ENDTRY
		
		RETURN 
	ENDPROC

	PROCEDURE pgfIntelliSenseEditor.pagCommand.cmdTest.Refresh
		* RAS 29-Oct-2014, Added logic to only enable when applicable.
		LOCAL llEnable
		
		llEnabled    = INLIST(UPPER(ALLTRIM(foxcode.Type)), "U", "C", "F")
		this.Enabled = llEnabled
		
		RETURN 
	ENDPROC

	PROCEDURE pgfIntelliSenseEditor.pagCommand.cmdTimeStamp.Click
		REPLACE timestamp WITH DATETIME() IN FoxCode
		
		this.Parent.txtTimestamp.Refresh()
		
		RETURN 
	ENDPROC

	PROCEDURE pgfIntelliSenseEditor.pagCommand.cmdTimeStamp.LostFocus
		thisform.grdFoxcode.colTimeStamp.Refresh()
		RETURN 
	ENDPROC

	PROCEDURE pgfIntelliSenseEditor.pagCommand.cmdUniqueID.Click
		REPLACE uniqueid WITH SYS(2015) IN FoxCode
		
		this.Parent.txtUniqueid.Refresh()
		
		RETURN 
	ENDPROC

	PROCEDURE pgfIntelliSenseEditor.pagCommand.edtData.RightClick
		thisform.TextEditData(this)
		RETURN
	ENDPROC

	PROCEDURE pgfIntelliSenseEditor.pagCommand.lblData.Click
		thisform.TextEditData(This.Parent.edtData)
		RETURN
	ENDPROC

	PROCEDURE pgfIntelliSenseEditor.pagCommand.txtAbbrev.LostFocus
		thisform.grdFoxcode.colAbbrev.Refresh()
		RETURN 
	ENDPROC

	PROCEDURE pgfIntelliSenseEditor.pagCommand.txtExpanded.LostFocus
		thisform.grdFoxcode.colExpanded.Refresh()
		RETURN 
	ENDPROC

	PROCEDURE pgfIntelliSenseEditor.pagCommand.txtTimestamp.LostFocus
		thisform.grdFoxcode.colTimeStamp.Refresh()
		RETURN 
	ENDPROC

ENDDEFINE
