*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="thor_tool_repository_insinto_builder.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="1" />

	DataSource = .NULL.
	Height = 0
	Left = 0
	Name = "Dataenvironment"
	Top = 0
	Width = 0

ENDDEFINE

DEFINE CLASS insinto AS form 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lblFields" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblSelected" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lstOther" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmgH_move2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lstSel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmgH_remove4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="CbTabs" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdSort" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ogFrom" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtAlias" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkWithType" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ogLang" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdOk" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtPreview" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkFieldName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Command1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkCreateLocVar" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkAddCAst" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ogCommand" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Check1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Check2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Command2" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: makecmd
		*m: newtable
		*m: sqltype
		*p: caliasobject
		*p: laddcast
		*p: laddnvl
		*p: laddprefix
		*p: lcommname
		*p: lcommtype
		*p: lcreatelocals
		*p: ncommand
		*p: nlanguage
		*p: nselect		&& selected area
		*p: nvaluefrom
		*a: paused[1,0]
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	AutoCenter = .T.
	caliasobject = 
	Caption = "INSERT INTO builder"
	DoCreate = .T.
	Height = 600
	laddcast = .F.
	laddnvl = .F.
	laddprefix = .F.
	lcommname = .F.
	lcommtype = .F.
	lcreatelocals = .F.
	MinHeight = 600
	MinWidth = 790
	Name = "insinto"
	ncommand = 1
	nlanguage = 1
	nselect = 0		&& selected area
	nvaluefrom = 1
	Width = 790
	_memberdata = <VFPData>
		<memberdata name="nselect" display="nSelect"/>
		<memberdata name="nvaluefrom" display="nValueFrom"/>
		<memberdata name="caliasobject" display="cAliasObject"/>
		<memberdata name="nlanguage" display="nLanguage"/>
		<memberdata name="lcommname" display="lCommName"/>
		<memberdata name="lcommtype" display="lCommType"/>
		<memberdata name="sqltype" display="sqlType"/>
		<memberdata name="laddprefix" display="lAddPrefix"/>
		<memberdata name="laddnvl" display="lAddNvl"/>
		</VFPData>		&& XML Metadata for customizable properties

	ADD OBJECT 'CbTabs' AS combobox WITH ;
		Height = 25, ;
		Left = 6, ;
		Name = "CbTabs", ;
		RowSource = "thisform.paused", ;
		RowSourceType = 5, ;
		Style = 2, ;
		TabIndex = 2, ;
		Top = 3, ;
		Width = 256
		*< END OBJECT: BaseClass="combobox" />

	ADD OBJECT 'Check1' AS checkbox WITH ;
		Alignment = 0, ;
		Anchor = 3, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Add Prefix", ;
		ControlSource = "thisform.lAddPrefix", ;
		Height = 17, ;
		Left = 267, ;
		Name = "Check1", ;
		TabIndex = 18, ;
		Top = 475, ;
		Value = .T., ;
		Width = 72
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'Check2' AS checkbox WITH ;
		Alignment = 0, ;
		Anchor = 3, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Add Nvl", ;
		ControlSource = "thisform.lAddNvl", ;
		Height = 17, ;
		Left = 267, ;
		Name = "Check2", ;
		TabIndex = 19, ;
		Top = 496, ;
		Value = .T., ;
		Width = 59
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'chkAddCAst' AS checkbox WITH ;
		Alignment = 0, ;
		Anchor = 3, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Add Cast()", ;
		ControlSource = "thisform.lAddCast", ;
		Height = 17, ;
		Left = 267, ;
		Name = "chkAddCAst", ;
		TabIndex = 17, ;
		Top = 454, ;
		Value = .T., ;
		Width = 76
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'chkCreateLocVar' AS checkbox WITH ;
		Alignment = 0, ;
		Anchor = 3, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Create local variables", ;
		ControlSource = "thisform.lCreateLocals", ;
		Height = 17, ;
		Left = 267, ;
		Name = "chkCreateLocVar", ;
		TabIndex = 16, ;
		Top = 433, ;
		Value = .T., ;
		Width = 137
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'chkFieldName' AS checkbox WITH ;
		Alignment = 0, ;
		Anchor = 3, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Field name", ;
		ControlSource = "thisform.lCommName", ;
		Height = 17, ;
		Left = 267, ;
		Name = "chkFieldName", ;
		TabIndex = 21, ;
		Top = 531, ;
		Value = .T., ;
		Width = 80
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'chkWithType' AS checkbox WITH ;
		Alignment = 0, ;
		Anchor = 3, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Field type", ;
		ControlSource = "thisform.lCommType", ;
		Height = 17, ;
		Left = 267, ;
		Name = "chkWithType", ;
		TabIndex = 22, ;
		Top = 551, ;
		Value = .T., ;
		Width = 70
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'cmdCancel' AS commandbutton WITH ;
		Anchor = 6, ;
		Cancel = .T., ;
		Caption = "Cancel", ;
		Height = 27, ;
		Left = 267, ;
		Name = "cmdCancel", ;
		TabIndex = 23, ;
		Top = 568, ;
		Width = 52
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdOk' AS commandbutton WITH ;
		Anchor = 6, ;
		Caption = "\<Copy", ;
		FontBold = .T., ;
		Height = 27, ;
		Left = 373, ;
		Name = "cmdOk", ;
		TabIndex = 25, ;
		Top = 568, ;
		Width = 52
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdSort' AS commandbutton WITH ;
		Anchor = 6, ;
		Caption = "sort", ;
		Height = 21, ;
		Left = 225, ;
		Name = "cmdSort", ;
		TabIndex = 10, ;
		Top = 432, ;
		Width = 37
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmgH_move2' AS commandgroup WITH ;
		Anchor = 6, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		BorderStyle = 0, ;
		ButtonCount = 2, ;
		ControlSource = "", ;
		Height = 35, ;
		Left = 8, ;
		Name = "cmgH_move2", ;
		ReleaseErase = .F., ;
		SpecialEffect = 1, ;
		TabIndex = 5, ;
		Top = 396, ;
		Width = 83, ;
		Command1.Caption = (chr(0xF1)), ;
		Command1.FontName = "Wingdings", ;
		Command1.FontSize = 11, ;
		Command1.Height = 25, ;
		Command1.Left = 5, ;
		Command1.Name = "Command1", ;
		Command1.ReleaseErase = .F., ;
		Command1.Top = 5, ;
		Command1.Width = 35, ;
		Command2.Caption = (chr(0xF1)+chr(0xF1)), ;
		Command2.FontName = "Wingdings", ;
		Command2.FontSize = 11, ;
		Command2.Height = 25, ;
		Command2.Left = 43, ;
		Command2.Name = "Command2", ;
		Command2.ReleaseErase = .F., ;
		Command2.Top = 5, ;
		Command2.Width = 35
		*< END OBJECT: BaseClass="commandgroup" />

	ADD OBJECT 'cmgH_remove4' AS commandgroup WITH ;
		Anchor = 6, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		BorderStyle = 0, ;
		ButtonCount = 2, ;
		ControlSource = "", ;
		Height = 35, ;
		Left = 101, ;
		Name = "cmgH_remove4", ;
		ReleaseErase = .F., ;
		SpecialEffect = 1, ;
		TabIndex = 6, ;
		Top = 396, ;
		Width = 82, ;
		Command1.Caption = (chr(0xF2)), ;
		Command1.FontName = "Wingdings", ;
		Command1.FontSize = 11, ;
		Command1.Height = 25, ;
		Command1.Left = 5, ;
		Command1.Name = "Command1", ;
		Command1.ReleaseErase = .F., ;
		Command1.Top = 5, ;
		Command1.Width = 35, ;
		Command2.Caption = (chr(0xF2)+chr(0xF2)), ;
		Command2.FontName = "Wingdings", ;
		Command2.FontSize = 11, ;
		Command2.Height = 25, ;
		Command2.Left = 42, ;
		Command2.Name = "Command2", ;
		Command2.ReleaseErase = .F., ;
		Command2.Top = 5, ;
		Command2.Width = 35
		*< END OBJECT: BaseClass="commandgroup" />

	ADD OBJECT 'Command1' AS commandbutton WITH ;
		Caption = "sort", ;
		Height = 21, ;
		Left = 225, ;
		Name = "Command1", ;
		TabIndex = 9, ;
		Top = 33, ;
		Width = 37
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'Command2' AS commandbutton WITH ;
		Anchor = 6, ;
		Caption = "\<Exec", ;
		Height = 27, ;
		Left = 320, ;
		Name = "Command2", ;
		TabIndex = 24, ;
		ToolTipText = "ExecSript ... only for Select vfp:  SELECT + BROWSE", ;
		Top = 568, ;
		Width = 52
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'edtPreview' AS editbox WITH ;
		Anchor = 15, ;
		FontName = "Courier New", ;
		Height = 598, ;
		Left = 429, ;
		Name = "edtPreview", ;
		TabIndex = 27, ;
		Top = 1, ;
		Width = 360
		*< END OBJECT: BaseClass="editbox" />

	ADD OBJECT 'Label1' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Table", ;
		FontSize = 9, ;
		Height = 17, ;
		Left = 266, ;
		Name = "Label1", ;
		ReleaseErase = .F., ;
		TabIndex = 1, ;
		Top = 7, ;
		Width = 33
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label2' AS label WITH ;
		Anchor = 3, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "From Alias / object name", ;
		FontSize = 9, ;
		Height = 17, ;
		Left = 267, ;
		Name = "Label2", ;
		ReleaseErase = .F., ;
		TabIndex = 14, ;
		Top = 378, ;
		Width = 135, ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label4' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Preview", ;
		FontSize = 9, ;
		Height = 17, ;
		Left = 371, ;
		Name = "Label4", ;
		ReleaseErase = .F., ;
		TabIndex = 26, ;
		Top = 7, ;
		Width = 45
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label5' AS label WITH ;
		Anchor = 3, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Comment", ;
		FontSize = 9, ;
		Height = 17, ;
		Left = 267, ;
		Name = "Label5", ;
		ReleaseErase = .F., ;
		TabIndex = 20, ;
		Top = 512, ;
		Width = 55, ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblFields' AS label WITH ;
		Anchor = 6, ;
		BackStyle = 0, ;
		Caption = "Not selected fields", ;
		FontSize = 9, ;
		Height = 17, ;
		Left = 6, ;
		Name = "lblFields", ;
		ReleaseErase = .F., ;
		TabIndex = 7, ;
		Top = 434, ;
		Width = 104
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblSelected' AS label WITH ;
		BackStyle = 0, ;
		Caption = "Selected fields", ;
		FontSize = 9, ;
		Height = 17, ;
		Left = 6, ;
		Name = "lblSelected", ;
		ReleaseErase = .F., ;
		TabIndex = 3, ;
		Top = 35, ;
		Width = 83
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lstOther' AS listbox WITH ;
		Anchor = 6, ;
		ColorSource = 3, ;
		ColumnCount = 3, ;
		ColumnWidths = "90,40,90", ;
		ControlSource = "", ;
		Enabled = .T., ;
		FontBold = .F., ;
		FontSize = 9, ;
		Height = 143, ;
		Left = 6, ;
		MultiSelect = .T., ;
		Name = "lstOther", ;
		ReleaseErase = .F., ;
		RowSource = "", ;
		RowSourceType = 0, ;
		TabIndex = 8, ;
		TerminateRead = .F., ;
		Top = 454, ;
		Value = 1, ;
		Width = 256
		*< END OBJECT: BaseClass="listbox" />

	ADD OBJECT 'lstSel' AS listbox WITH ;
		Anchor = 5, ;
		ColorSource = 3, ;
		ColumnCount = 3, ;
		ColumnWidths = "90,40,90", ;
		ControlSource = "", ;
		Enabled = .T., ;
		FontBold = .F., ;
		FontSize = 9, ;
		Height = 342, ;
		Left = 6, ;
		MoverBars = .T., ;
		MultiSelect = .T., ;
		Name = "lstSel", ;
		ReleaseErase = .F., ;
		RowSource = "", ;
		RowSourceType = 0, ;
		TabIndex = 4, ;
		TerminateRead = .F., ;
		Top = 55, ;
		Value = 1, ;
		Width = 256
		*< END OBJECT: BaseClass="listbox" />

	ADD OBJECT 'ogCommand' AS optiongroup WITH ;
		Anchor = 3, ;
		AutoSize = .F., ;
		ButtonCount = 7, ;
		ControlSource = "thisform.nCommand", ;
		Height = 143, ;
		Left = 267, ;
		Name = "ogCommand", ;
		TabIndex = 11, ;
		Top = 56, ;
		Value = 1, ;
		Width = 153, ;
		Option1.AutoSize = .T., ;
		Option1.Caption = "Insert into", ;
		Option1.Height = 17, ;
		Option1.Left = 5, ;
		Option1.Name = "Option1", ;
		Option1.Top = 5, ;
		Option1.Value = 1, ;
		Option1.Width = 72, ;
		Option2.AutoSize = .T., ;
		Option2.Caption = "Select", ;
		Option2.Height = 17, ;
		Option2.Left = 5, ;
		Option2.Name = "Option2", ;
		Option2.Top = 24, ;
		Option2.Width = 52, ;
		Option3.AutoSize = .T., ;
		Option3.Caption = "Field List", ;
		Option3.Height = 17, ;
		Option3.Left = 5, ;
		Option3.Name = "Option3", ;
		Option3.Top = 43, ;
		Option3.Width = 68, ;
		Option4.AutoSize = .T., ;
		Option4.Caption = "CursorSchema 1", ;
		Option4.Height = 17, ;
		Option4.Left = 5, ;
		Option4.Name = "Option4", ;
		Option4.Top = 62, ;
		Option4.Width = 112, ;
		Option5.AutoSize = .T., ;
		Option5.Caption = "CursorSchema 2", ;
		Option5.Height = 17, ;
		Option5.Left = 5, ;
		Option5.Name = "Option5", ;
		Option5.Top = 81, ;
		Option5.Width = 112, ;
		Option6.AutoSize = .T., ;
		Option6.Caption = "Update", ;
		Option6.Height = 17, ;
		Option6.Left = 5, ;
		Option6.Name = "Option6", ;
		Option6.Top = 100, ;
		Option6.Width = 58, ;
		Option7.AutoSize = .T., ;
		Option7.Caption = "Create Table", ;
		Option7.Height = 17, ;
		Option7.Left = 5, ;
		Option7.Name = "Option7", ;
		Option7.Top = 119, ;
		Option7.Width = 89
		*< END OBJECT: BaseClass="optiongroup" />

	ADD OBJECT 'ogFrom' AS optiongroup WITH ;
		Anchor = 3, ;
		AutoSize = .F., ;
		ButtonCount = 5, ;
		ControlSource = "thisform.nValueFrom", ;
		Height = 103, ;
		Left = 267, ;
		Name = "ogFrom", ;
		TabIndex = 12, ;
		Top = 207, ;
		Value = 1, ;
		Width = 153, ;
		Option1.AutoSize = .T., ;
		Option1.Caption = "VALUES - blank values", ;
		Option1.Height = 17, ;
		Option1.Left = 5, ;
		Option1.Name = "Option1", ;
		Option1.Top = 5, ;
		Option1.Value = 1, ;
		Option1.Width = 143, ;
		Option2.AutoSize = .T., ;
		Option2.Caption = "VALUES alias / object", ;
		Option2.Height = 17, ;
		Option2.Left = 5, ;
		Option2.Name = "Option2", ;
		Option2.Top = 24, ;
		Option2.Width = 136, ;
		Option3.AutoSize = .T., ;
		Option3.Caption = "VALUES - m.", ;
		Option3.Height = 17, ;
		Option3.Left = 5, ;
		Option3.Name = "Option3", ;
		Option3.Top = 43, ;
		Option3.Width = 88, ;
		Option4.AutoSize = .T., ;
		Option4.Caption = "VALUES m.l+type", ;
		Option4.Height = 17, ;
		Option4.Left = 5, ;
		Option4.Name = "Option4", ;
		Option4.Top = 62, ;
		Option4.Width = 113, ;
		Option5.AutoSize = .T., ;
		Option5.Caption = "SELECT from alias", ;
		Option5.Height = 17, ;
		Option5.Left = 5, ;
		Option5.Name = "Option5", ;
		Option5.Top = 81, ;
		Option5.Width = 123
		*< END OBJECT: BaseClass="optiongroup" />

	ADD OBJECT 'ogLang' AS optiongroup WITH ;
		Anchor = 3, ;
		AutoSize = .F., ;
		ButtonCount = 3, ;
		ControlSource = "thisform.nLanguage", ;
		Height = 65, ;
		Left = 267, ;
		Name = "ogLang", ;
		TabIndex = 13, ;
		Top = 312, ;
		Value = 1, ;
		Width = 153, ;
		Option1.Caption = "VFP", ;
		Option1.Height = 17, ;
		Option1.Left = 5, ;
		Option1.Name = "Option1", ;
		Option1.Top = 5, ;
		Option1.Value = 1, ;
		Option1.Width = 61, ;
		Option2.AutoSize = .T., ;
		Option2.Caption = "SqlExec T-SQL", ;
		Option2.Height = 17, ;
		Option2.Left = 5, ;
		Option2.Name = "Option2", ;
		Option2.Top = 24, ;
		Option2.Width = 100, ;
		Option3.AutoSize = .T., ;
		Option3.Caption = "SqlExec other", ;
		Option3.Height = 17, ;
		Option3.Left = 5, ;
		Option3.Name = "Option3", ;
		Option3.Top = 43, ;
		Option3.Width = 93
		*< END OBJECT: BaseClass="optiongroup" />

	ADD OBJECT 'txtAlias' AS textbox WITH ;
		Anchor = 3, ;
		ControlSource = "thisform.cAliasObject", ;
		Height = 25, ;
		Left = 267, ;
		Name = "txtAlias", ;
		TabIndex = 15, ;
		Top = 396, ;
		Width = 153
		*< END OBJECT: BaseClass="textbox" />
	
	PROCEDURE Destroy
		This.oSettings.Save (This)
		This.oSettings = .Null.
		
		SELECT (thisform.nSelect)
		
	ENDPROC

	PROCEDURE Init
		this.nSelect=SELECT()
		
		Do Case
		Case Used()
			Thisform.cbTabs.Value = Alias()
		Case Empty(Thisform.paused(1))
			* no table used
			Messagebox("No table used", 16)
			Return .F.
		Otherwise
			Thisform.cbTabs.Value = Thisform.paused(1)
		Endcase
		
		
		Local lnLeft, lnTop, loMethod, loSettings
		
		
		*** JRN 5/16/2011 : Restore previous settings
		loSettings = Execscript (_Screen.cThorDispatcher, 'Class=ThorFormSettings', Thisform)
		Thisform.AddProperty ('oSettings', loSettings)
		loSettings.Restore (Thisform) && Gets top, left, height, width
		
		*** JRN 5/16/2011 : Restore other properties
		loSettings.Restore(Thisform, 'nValueFrom, cAliasObject, nLanguage, lCommName, lCommType, lCreateLocals, lAddCast, lAddPrefix, lAddNvl, nCommand')
		
		Thisform.BindControls = .T.
		Thisform.Resize()
		
		SELECT (Thisform.cbTabs.Value)
		Thisform.newTable()
		
	ENDPROC

	PROCEDURE Load
		AUSED(thisform.paUsed)
		
	ENDPROC

	PROCEDURE makecmd
		#Define ccCR Chr(13) + Chr(10)
		#Define ccTab Chr(9)
		
		Local lcAlias, lcBlank, lcBlank1, lcCommand, lcComment, lcCreaTable, lcCreateLoc, lcCreateLocC
		Local lcCreateLocD, lcCreateLocL, lcCreateLocN, lcCreateLocT, lcCurSchema1, lcCurSchema2
		Local lcDeclareLoc, lcEmptyD, lcEmptyD1, lcEmptyL, lcEmptyL1, lcEmptyT, lcEmptyT1, lcField
		Local lcFromAlias, lcLeftB, lcMemVarName, lcNvl, lcPrefix, lcQm, lcRightB, lcSemicolon, lcType
		Local lcType1, lcU, lcValue, lcX, lcY, liField, llCreateLocals, llName, llType, lladdcast
		
		lcX = ''
		lcY = ''
		lcU = ''
		
		Do Case
		Case Thisform.ogLang.Value = 1
		* VFP
			lcSemicolon = ";"
			lcComment	  = "&" + "& "
			lcEmptyL	  = ".F."
			lcEmptyD	  = "{}"
			lcEmptyT	  = "{ :}"
			lcEmptyL1	  = ".F."
			lcEmptyD1	  = "{}"
			lcEmptyT1	  = "{ :}"
			lcQm		  = ""
			lcLeftB	  = ""
			lcRightB	  = ""
			lcNvl		  = "Nvl("
		Case Thisform.ogLang.Value = 2
		* T-SQL Microsoft
			lcSemicolon = ""
			lcComment	  = "-- "
			lcEmptyL	  = "Cast(0 as Bit)"
			lcEmptyD	  = "Cast( null as DateTime)"
			lcEmptyT	  = "Cast( null as DateTime)"
			lcEmptyL1	  = "0"
			lcEmptyD1	  = "null"
			lcEmptyT1	  = "null"
			lcQm		  = "?"
			lcLeftB	  = "["
			lcRightB	  = "]"
			lcNvl		  = "IsNull("
		Otherwise
		* Other-SQL
			lcSemicolon = ""
			lcComment	  = "-- "
			lcEmptyL	  = "Cast(0 as Bit)"
			lcEmptyD	  = "Cast( null as DateTime)"
			lcEmptyT	  = "Cast( null as DateTime)"
			lcEmptyL1	  = "0"
			lcEmptyD1	  = "null"
			lcEmptyT1	  = "null"
			lcQm		  = "?"
			lcLeftB	  = ""
			lcRightB	  = ""
			lcNvl		  = "Coalesce("
		Endcase
		
		lcPrefix = m.lcLeftB;
			+ Evl(Chrtran(Thisform.txtAlias.Value, ". ", ""), "tmp" + Alias());
			+ m.lcRightB;
			+ "."
		
		
		llCreateLocals = Inlist(Thisform.ncommand, 1, 6) And Inlist(Thisform.nValueFrom, 3, 4) And Thisform.lcreatelocals
		
		llName		 = Thisform.chkFieldName.Value
		llType		 = Thisform.chkWithType.Value And Not m.llCreateLocals
		lcAlias		 = m.lcLeftB + Alias() + m.lcRightB
		lcFromAlias	 = m.lcLeftB + Evl( Proper(Alltrim(Thisform.txtAlias.Value)), "tmp" + Alias()) + m.lcRightB
		lcCurSchema1 = ""
		lcCurSchema2 = ""
		lcDeclareLoc = ""
		lcCreateLocN = ""
		lcCreateLocC = ""
		lcCreateLocD = ""
		lcCreateLocT = ""
		lcCreateLocL = ""
		lcCreateLoc	 = ""
		lcCreaTable	 = ""
		
		With Thisform.lstSel
			For liField = 1 To .ListCount
		
				lcField	=  Proper(.List(m.liField, 1))
				lcField	= Padr(m.lcField, Max(11, Len(m.lcField) + 1))
				lcType	= .List(m.liField, 2)
				lcType1	= Left(m.lcType, 1)
		
				lcBlank = Icase(;
					  m.lcType1 = "L", m.lcEmptyL, ;
					  m.lcType1 = "D", m.lcEmptyD, ;
					  m.lcType1 = "T", m.lcEmptyT, ;
					  m.lcType1 $ "NYFI", "0", ;
					  "''")
		
				lcBlank1 = Icase(;
					  m.lcType1 = "L", m.lcEmptyL1, ;
					  m.lcType1 = "D", m.lcEmptyD1, ;
					  m.lcType1 = "T", m.lcEmptyT1, ;
					  m.lcType1 $ "NYFI", "0", ;
					  "''")
		
				lcMemVarName = Trim(Icase(;
						Thisform.ogFrom.Value = 3, m.lcField, ;
						Thisform.ogFrom.Value = 4, "l" + Lower(m.lcType1) + m.lcField, ;
						""))
		
				If m.llCreateLocals
					Do Case
					Case m.lcType = "L"
						lcCreateLocL = m.lcCreateLocL +  ", " + m.lcMemVarName
					Case m.lcType = "D"
						lcCreateLocD = m.lcCreateLocD +  ", " + m.lcMemVarName
					Case m.lcType = "T"
						lcCreateLocT = m.lcCreateLocT +  ", " + m.lcMemVarName
					Case m.lcType = "NYFI"
						lcCreateLocN = m.lcCreateLocN +  ", " + m.lcMemVarName
					Otherwise
						lcCreateLocC = m.lcCreateLocC +  ", " + m.lcMemVarName
					Endcase
		
					lcCreateLoc = m.lcCreateLoc + Padr(m.lcMemVarName, Max(12, Len(m.lcMemVarName)));
						+ " = " + Padr(m.lcBlank1, Max(10, Len(m.lcBlank1) + 2));
						+ Iif(Thisform.lCommType, "&" + "& " + m.lcType, "") + ccCR
		
					lcDeclareLoc = m.lcDeclareLoc ;
						+ Iif(Len(m.lcDeclareLoc) - Rat(ccCR, m.lcDeclareLoc) > 70, ";" + ccCR +  ccTab, "") ;
						+ Iif(m.liField = 1, '', ', ');
						+ m.lcMemVarName
				Endif
		
		
				lcValue = Icase(;
					  Thisform.ncommand = 2 And Thisform.lAddPrefix ;
					  Or ;
					  Thisform.ncommand = 5 And Thisform.nValueFrom = 5, ;
					  m.lcPrefix + m.lcLeftB + Trim(m.lcField) + m.lcRightB, ;
					  Inlist(Thisform.ncommand, 2), m.lcLeftB + Trim(m.lcField) + m.lcRightB, ;
					  Thisform.ogFrom.Value = 1, m.lcBlank, ;
					  Thisform.ogFrom.Value = 2, m.lcQm + Chrtran(m.lcPrefix, "[]", "") + m.lcField, ;
					  Thisform.ogFrom.Value = 3, m.lcQm + "m." + m.lcField, ;
					  Thisform.ogFrom.Value = 4, m.lcQm + "m.l" + Lower(m.lcType1) + m.lcField, ;
					  m.lcField)
		
		        
				If Thisform.lAddNvl And Atc("cast(", m.lcValue) = 0 And Inlist(Thisform.ncommand, 1, 2, 5)
					lcValue = m.lcNvl  + m.lcValue + ", " + m.lcBlank + ")"
				Endif
		
				lladdcast = Thisform.laddcast or inlist(m.lcType1 , "L", "D", "T") and Thisform.ogLang.Value >= 2
				
				If m.lladdcast And Atc("cast(", m.lcValue) = 0 And Inlist(Thisform.ncommand, 1, 2, 5)
					lcValue = "Cast(" + m.lcValue
					If Len(m.lcValue) < 22
						lcValue = m.lcValue +  Space(22 - Len(m.lcValue))
					Endif
		
					lcValue = m.lcValue + " as ";
						+ .List(m.liField, Iif(Thisform.ogLang.Value = 1, 2, 3)) ;
						+ ") "
					If Thisform.ncommand = 2
						If Len(m.lcValue) < 45
							lcValue = m.lcValue +  Space(45 - Len(m.lcValue))
						Endif
						lcValue = m.lcValue + " as " ;
							+  m.lcLeftB ;
							+ Trim(m.lcField) ;
							+ m.lcRightB
					Endif
		
				Endif
		
				lcX = m.lcX ;
					+ Iif(m.liField = 1 Or Len(m.lcX) - Rat(ccCR, m.lcX) > 70, m.lcSemicolon + ccCR +  ccTab, "") ;
					+ Iif(m.liField = 1, '  ', ', ');
					+ m.lcLeftB + Trim(m.lcField) + m.lcRightB ;
		
				lcY = m.lcY ;
					+ ccTab ;
					+ Iif(m.liField > 1, ', ', '  ');
					+ Padr(m.lcValue, Max(Len(m.lcValue), 11)) ;
					+ m.lcSemicolon ;
					+ Iif( m.llName Or m.llType, ccTab + m.lcComment, "");
					+ Iif( m.llName, m.lcField, "");
					+ Iif( m.llType, m.lcType, "");
					+ ccCR
		
				lcCurSchema1 = m.lcCurSchema1 + Iif(m.liField > 1, ', ', '') + .List(m.liField, 2)
				lcCurSchema2 = m.lcCurSchema2 + Iif(m.liField > 1, ', ', '') + .List(m.liField, 1) + " " + .List(m.liField, 2) + ccCR
		
				lcCreaTable = m.lcCreaTable ;
					+ Iif(m.liField > 1, ', ', '  ');
					+ Padr( m.lcLeftB + Trim(m.lcField) + m.lcRightB, Max(13, Len( Alltrim( m.lcLeftB + Trim(m.lcField) + m.lcRightB)))) ;
					+ Icase(;
					  Thisform.ogLang.Value = 1, .List(m.liField, 2), ;
					  Thisform.ogLang.Value = 2, .List(m.liField, 3), ;
					  Chrtran(.List(m.liField, 3), "[]", ""));
					+ m.lcSemicolon + ccCR ;
		
				lcU = m.lcU ;
					+ ccTab ;
					+ Iif(m.liField > 1, ', ', '  ');
					+ Padr( m.lcLeftB + Trim(m.lcField) + m.lcRightB, Max(13, Len( Alltrim( m.lcLeftB + Trim(m.lcField) + m.lcRightB)))) ;
					+ " = ";
					+ Padr(m.lcValue, Max(Len(m.lcValue), 11)) ;
					+ m.lcSemicolon ;
					+ Iif( m.llName Or m.llType, ccTab + m.lcComment, "");
					+ Iif( m.llName, m.lcField, "");
					+ Iif( m.llType, m.lcType, "");
					+ ccCR
		
			Endfor
		Endwith
		
		
		Do Case
		Case Thisform.ncommand = 1 && Insert into
		
			lcCommand = ;
				'INSERT INTO ' + m.lcAlias + ' ( ' ;
				+ m.lcX ;
				+ m.lcSemicolon + ccCR ;
				+ '     ) ' + m.lcSemicolon + ccCR ;
				+ Iif(Thisform.ogFrom.Value = 5, "  SELECT ", "  VALUES ( ");
				+ m.lcSemicolon + ccCR ;
				+ m.lcY ;
				+ Iif(Thisform.ogFrom.Value = 5 ;
				  , "    FROM " + m.lcFromAlias;
				  , "    )");
				+ ccCR
		
		Case Thisform.ncommand = 2
		
			lcCommand = ;
				'SELECT ' ;
				+ m.lcSemicolon + ccCR ;
				+ m.lcY ;
				+ "    FROM " + m.lcAlias;
				+ ccCR
		
		Case Thisform.ncommand = 3
		
			lcCommand = Alltrim(m.lcX, 1, ";", " ")
		
		Case Thisform.ncommand = 4
		
			lcCommand = m.lcCurSchema1
		
		Case Thisform.ncommand = 5
		
			lcCommand = m.lcCurSchema2
		
		Case Thisform.ncommand = 6
			lcCommand = ;
				'UPDATE ' + m.lcAlias + ' SET ' ;
				+ m.lcSemicolon + ccCR ;
				+ m.lcU ;
				+ Iif(Thisform.nValueFrom < 5 ;
				  , "" ;
				  , "  FROM " + m.lcAlias + ", " + m.lcFromAlias + m.lcSemicolon + ccCR ;
				  );
				+ "  WHERE xxxx";
				+ ccCR
		
		Case Thisform.ncommand = 7
			lcCommand = ;
				'CREATE TABLE ' + m.lcAlias + ' ( ' ;
				+ m.lcSemicolon + ccCR ;
				+ m.lcCreaTable ;
				+ ")" + ccCR
		
		*!*	Case Thisform.ncommand = 7
		Endcase
		
		If m.llCreateLocals
			If Thisform.nLanguage > 1
				lcCommand = "Text To lcSqlCommand Noshow " + ccCR + m.lcCommand
			Endif
		
		*!*		If Not Empty(m.lcCreateLocL)
		*!*			m.lcCommand = "Store .f. to " + Alltrim(m.lcCreateLocL, 1, ",") + ccCR + ccCR + m.lcCommand
		*!*		Endif
		*!*		If Not Empty(m.lcCreateLocN)
		*!*			m.lcCommand = "Store 0 to " + Alltrim(m.lcCreateLocN, 1, ",") + ccCR + ccCR + m.lcCommand
		*!*		Endif
		*!*		If Not Empty(m.lcCreateLocC)
		*!*			m.lcCommand = "Store '' to " + Alltrim(m.lcCreateLocC, 1, ",") + ccCR + ccCR + m.lcCommand
		*!*		Endif
		*!*		If Not Empty(m.lcCreateLocD)
		*!*			m.lcCommand = "Store {} to " + Alltrim(m.lcCreateLocD, 1, ",") + ccCR + ccCR + m.lcCommand
		*!*		Endif
		*!*		If Not Empty(m.lcCreateLocT)
		*!*			m.lcCommand = "Store {.. :} to " + Alltrim(m.lcCreateLocT, 1, ",") + ccCR + ccCR + m.lcCommand
		*!*		Endif
			If Not Empty(m.lcCreateLoc)
				lcCommand = m.lcCreateLoc + ccCR + ccCR + m.lcCommand
			Endif
			If Not Empty(m.lcDeclareLoc )
				lcCommand = "Local " + m.lcDeclareLoc + ccCR + ccCR + m.lcCommand
			Endif
			If Thisform.nLanguage > 1
				lcCommand = m.lcCommand + ccCR + "EndText"  + ccCR + ccCR + "SqlExec(m.lnSqlHandle,m.lcSqlCommand)" + ccCR
			Endif
		Endif
		
		
		Thisform.edtPreview.Value = m.lcCommand
	ENDPROC

	PROCEDURE newtable
		
		Local laFields(1, 1), liField, lnCnt
		m.lnCnt = Afields(laFields)
		
		Thisform.lstOther.Clear()
		Thisform.lstSel.Clear()
		With Thisform.lstSel
			.Clear()
			For m.liField = 1 To m.lnCnt
		
				lcField	= laFields(m.liField, 1)
				lcType	= laFields(m.liField, 2)
				lcLen	= laFields(m.liField, 3)
				lcDec	= laFields(m.liField, 4)
				lcType  = m.lcType ;
					+ Iif( m.lcType $ 'DTLMGI', ;
					  '', ;
					  '(' + Transform(m.lcLen) + Iif(m.lcDec > 0, ',' + Transform(m.lcDec), '') + ')' )
		
				lcTypeSQL = thisform.sqlType(m.lcType, m.lcLen, m.lcDec )
				.AddItem(lcField)
				.AddListItem(lcType, .NewItemId, 2)
				.AddListItem(lcTypeSql, .NewItemId, 3)
			Endfor
		Endwith
		
		Thisform.Refresh
	ENDPROC

	PROCEDURE Refresh
		ThisForm.makecmd()
		
		
	ENDPROC

	PROCEDURE sqltype
		Lparameters lcFoxType, lnFoxLength, lnFoxDec
		Local lcSqlType, llNo_len
		lcSqlType = ""
		llNo_len  = .F.
		
		Do Case
		Case Inlist(m.lcFoxType, "I") Or Inlist(m.lcFoxType, "N", "F", "Y") And BETWEEN(m.lnFoxLength , 4, 9) And m.lnFoxDec = 0
			lcFoxType	= "I"
			m.lcSqlType	= m.lcSqlType + ' Integer'
			llNo_len	= .T.
		Case Inlist(m.lcFoxType, "N", "F", "Y") And m.lnFoxLength <= 3 And m.lnFoxDec = 0
			lcFoxType	= "N"
			m.lcSqlType	= m.lcSqlType + ' Smallint'
			llNo_len	= .T.
		Case Inlist(m.lcFoxType, "L")
			m.lcSqlType	= m.lcSqlType + ' Bit'
			llNo_len	= .T.
		Case Inlist(m.lcFoxType, "N", "F", "Y")
			m.lcSqlType = m.lcSqlType + ' Numeric'
		Case Inlist(m.lcFoxType, "C", "V")
			m.lcSqlType = m.lcSqlType + ' Varchar'
		Case Inlist(m.lcFoxType, "M")
			m.lcSqlType = m.lcSqlType + ' Text'
		Case Inlist(m.lcFoxType, "D", "T")
			m.lcSqlType	= m.lcSqlType + ' Datetime'
			llNo_len	= .T.
		Otherwise
			m.lcSqlType = m.lcFoxType
		Endcase
		
		If Not m.lcFoxType $ 'DTLMGPI' And Not m.llNo_len
			m.lcSqlType = m.lcSqlType + '(' + Ltrim(Str(m.lnFoxLength))
			If m.lnFoxDec > 0
				m.lcSqlType = m.lcSqlType + ',' + Ltrim(Str(m.lnFoxDec))
			Endif
			m.lcSqlType = m.lcSqlType + ')'
		Endif
		
		Return m.lcSqlType
	ENDPROC

	PROCEDURE CbTabs.Valid
		select (this.value)
		
		thisform.newTable()
		
		
	ENDPROC

	PROCEDURE Check1.Valid
		thisform.Refresh
	ENDPROC

	PROCEDURE Check2.Valid
		thisform.Refresh
	ENDPROC

	PROCEDURE chkAddCAst.Valid
		thisform.Refresh
	ENDPROC

	PROCEDURE chkCreateLocVar.Valid
		thisform.Refresh
	ENDPROC

	PROCEDURE chkFieldName.Valid
		thisform.Refresh
	ENDPROC

	PROCEDURE chkWithType.Valid
		thisform.Refresh
	ENDPROC

	PROCEDURE cmdCancel.Click
		thisform.Release()
	ENDPROC

	PROCEDURE cmdOk.Click
		_cliptext=thisform.edtPreview.Value
		thisform.Release()
	ENDPROC

	PROCEDURE cmdSort.Click
		Store .T. To ;
			Thisform.lstOther.Sorted, ;
			Thisform.lstOther.IncrementalSearch
		
	ENDPROC

	PROCEDURE cmgH_move2.Command1.Click
		*thisform.lstOther.valid()
		Local i
		With Thisform.lstOther
			i = 1
			Do While i <= .ListCount
				If .Selected(m.i)
					Thisform.lstSel.AddItem(.List(m.i, 1))
					Thisform.lstSel.AddListItem(.List(m.i, 2), Thisform.lstSel.NewItemId, 2)
					Thisform.lstSel.AddListItem(.List(m.i, 3), Thisform.lstSel.NewItemId, 3)
					.RemoveItem(m.i)
				Else
					i = m.i + 1
				Endif
			Enddo
		Endwith
		Thisform.Refresh()
		
		
	ENDPROC

	PROCEDURE cmgH_move2.Command2.Click
		Local i
		With Thisform.lstSel
			For i = 1 To Thisform.lstOther.ListCount
				.AddItem(Thisform.lstOther.List(m.i, 1))
				.AddListItem(Thisform.lstOther.List(m.i, 2), .NewItemId, 2)
				.AddListItem(Thisform.lstOther.List(m.i, 3), .NewItemId, 3)
			Endfor
		Endwith
		Thisform.lstOther.Clear()
		Thisform.Refresh()
		
		
	ENDPROC

	PROCEDURE cmgH_move2.When
		return !empty(thisform.lstOther.ListCount)
	ENDPROC

	PROCEDURE cmgH_remove4.Command1.Click
		*thisform.lstSel.valid()
		Local i
		With Thisform.lstSel
			i = 1
			Do While m.i <= .ListCount
				If .Selected(m.i)
					Thisform.lstOther.AddItem(.List(m.i, 1))
					Thisform.lstOther.AddListItem(.List(m.i, 2), Thisform.lstOther.NewItemId, 2)
					Thisform.lstOther.AddListItem(.List(m.i, 3), Thisform.lstOther.NewItemId, 3)
					.RemoveItem(m.i)
				Else
					i = m.i + 1
				Endif
			Enddo
		Endwith
		Thisform.Refresh()
		
		
	ENDPROC

	PROCEDURE cmgH_remove4.Command2.Click
		Local i
		With Thisform.lstOther
			For i = 1 To Thisform.lstSel.ListCount
				.AddItem(Thisform.lstSel.List(m.i, 1))
				.AddListItem(Thisform.lstSel.List(m.i, 2), .NewItemId, 2)
				.AddListItem(Thisform.lstSel.List(m.i, 3), .NewItemId, 3)
			Endfor
		Endwith
		Thisform.lstSel.Clear()
		Thisform.Refresh()
		
		
	ENDPROC

	PROCEDURE cmgH_remove4.When
		return !empty(thisform.lstSel.ListCount)
	ENDPROC

	PROCEDURE Command1.Click
		Store .T. To ;
			Thisform.lstSel.Sorted, ;
			Thisform.lstSel.IncrementalSearch
		thisform.Refresh
	ENDPROC

	PROCEDURE Command2.Click
		Local lcCmd, loErr
		
		Do Case
		Case Thisform.ogCommand.Value = 2 	And Thisform.ogLang.Value = 1
			* OK
		Case Messagebox("Set VFP - Select ?", 51, "Only for VFP Select", 0) = 6
			Thisform.ogCommand.Value = 2
			Thisform.ogLang.Value	 = 1
			Thisform.makecmd()
		Otherwise
			Return
		Endcase
		
		Try
			lcCmd = Alltrim(Thisform.edtPreview.Value, 1, ";", Chr(13), Chr(10), " ") + " into cursor tmpQuery "
			Use In (Select ('tmpQuery')) && Close 'tmpQuery'
			Execscript( m.lcCmd)
		    BROWSE NORMAL 
			Use In (Select ('tmpQuery')) && Close 'tmpQuery'
			Select (Thisform.cbTabs.Value)
		Catch To loErr
			Messagebox(loErr.Message)
		Endtry
		
		
		
		
		
	ENDPROC

	PROCEDURE lstOther.Valid
		With Thisform.lstSel
			.AddItem(This.List(This.ListIndex, 1))
			.AddListItem(This.List(This.ListIndex, 2), .NewItemId, 2)
			.AddListItem(This.List(This.ListIndex, 3), .NewItemId, 3)
		Endwith
		This.RemoveItem(This.ListIndex)
		Thisform.Refresh()
		
		
	ENDPROC

	PROCEDURE lstSel.InteractiveChange
		thisform.Refresh
	ENDPROC

	PROCEDURE lstSel.Valid
		With Thisform.lstOther
			.AddItem(This.List(This.ListIndex, 1))
			.AddListItem(This.List(This.ListIndex, 2), .NewItemId, 2)
			.AddListItem(This.List(This.ListIndex, 3), .NewItemId, 3)
		Endwith
		This.RemoveItem(This.ListIndex)
		Thisform.Refresh()
		
		
	ENDPROC

	PROCEDURE ogCommand.Valid
		thisform.Refresh
	ENDPROC

	PROCEDURE ogFrom.Valid
		thisform.Refresh
	ENDPROC

	PROCEDURE ogLang.Valid
		thisform.Refresh
	ENDPROC

	PROCEDURE txtAlias.Valid
		thisform.Refresh
	ENDPROC

ENDDEFINE
