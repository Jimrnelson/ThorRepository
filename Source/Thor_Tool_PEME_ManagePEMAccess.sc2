*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="thor_tool_peme_managepemaccess.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	DataSource = .NULL.
	Height = 0
	Left = 0
	Name = "Dataenvironment"
	Top = 0
	Width = 0

ENDDEFINE

DEFINE CLASS form1 AS form 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Grid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grid1.Column1.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grid1.Column1.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grid1.Column2.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grid1.Column2.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grid1.ColInstall.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grid1.ColInstall.Command1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grid1.ColInstall.Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grid1.ColRemove.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grid1.ColRemove.Command1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grid1.ColRemove.Label1" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: geteditpropertymenucode
		*m: getmenucontextcode
		*m: getmenuhitcode
		*m: getnewpropertymenucode
		*m: getpropertywindowcontextmenucode
		*m: installitem
		*m: uninstallitem
		*m: updatestatus		&& Triggers a change of information in the user interface elements provided by DoStatus.
		*p: cmenucontextcode
		*p: cmenuhitcode
		*p: ofoxcode
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	AutoCenter = .T.
	Caption = "Manage PEM Editor Access"
	cmenucontextcode = 
	cmenuhitcode = 
	DataSession = 2
	DoCreate = .T.
	Height = 165
	Name = "Form1"
	ofoxcode = .NULL.
	Width = 700
	WindowType = 1
	_memberdata = <VFPData>
		<memberdata name="ofoxcode" display="oFoxCode"/>
		<memberdata name="getnewpropertymenucode" display="GetNewPropertyMenuCode"/>
		<memberdata name="geteditpropertymenucode" display="GetEditPropertyMenuCode"/>
		<memberdata name="getpropertywindowcontextmenucode" display="GetPropertyWindowContextMenuCode"/>
		<memberdata name="updatestatus" display="UpdateStatus"/>
		<memberdata name="uninstallitem" display="UnInstallItem"/>
		<memberdata name="installitem" display="InstallItem"/>
		<memberdata name="cmenuhitcode" display="cMenuHitCode"/>
		<memberdata name="cmenucontextcode" display="cMenuContextCode"/>
		<memberdata name="getmenucontextcode" display="GetMenuContextCode"/>
		<memberdata name="getmenuhitcode" display="GetMenuHitCode"/>
		</VFPData>		&& XML Metadata for customizable properties

	ADD OBJECT 'Grid1' AS grid WITH ;
		ColumnCount = 4, ;
		DeleteMark = .F., ;
		GridLineColor = 192,192,192, ;
		GridLines = 1, ;
		HeaderHeight = 31, ;
		Height = 151, ;
		Left = 6, ;
		Name = "Grid1", ;
		OLEDropMode = 0, ;
		Panel = 1, ;
		RecordMark = .F., ;
		RecordSource = "crsr_Browse", ;
		RowHeight = 29, ;
		ScrollBars = 0, ;
		Top = 6, ;
		Width = 728, ;
		Column1.ControlSource = "crsr_Browse.Descript", ;
		Column1.Name = "Column1", ;
		Column1.Width = 200, ;
		Column2.ControlSource = "crsr_Browse.cStatus", ;
		Column2.Name = "Column2", ;
		Column2.Width = 225, ;
		Column3.DynamicCurrentControl = "IIF(Status = 2, 'Label1', 'Command1')", ;
		Column3.Name = "ColInstall", ;
		Column3.Sparse = .F., ;
		Column3.Width = 125, ;
		Column4.DynamicCurrentControl = "IIF(Status = 1, 'Label1', 'Command1')", ;
		Column4.Name = "ColRemove", ;
		Column4.Sparse = .F., ;
		Column4.Width = 125
		*< END OBJECT: BaseClass="grid" />

	ADD OBJECT 'Grid1.ColInstall.Command1' AS commandbutton WITH ;
		Caption = "Install PEM Editor", ;
		Height = 27, ;
		Left = 77, ;
		Name = "Command1", ;
		Top = 89, ;
		Width = 84
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'Grid1.ColInstall.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Install", ;
		FontBold = .T., ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grid1.ColInstall.Label1' AS label WITH ;
		Caption = " ", ;
		Height = 17, ;
		Left = 60, ;
		Name = "Label1", ;
		Top = 79, ;
		Width = 40
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Grid1.ColRemove.Command1' AS commandbutton WITH ;
		Caption = "Reset to default", ;
		Height = 27, ;
		Left = 79, ;
		Name = "Command1", ;
		Top = 77, ;
		Width = 84
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'Grid1.ColRemove.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Un-Install", ;
		FontBold = .T., ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grid1.ColRemove.Label1' AS label WITH ;
		Caption = " ", ;
		Height = 17, ;
		Left = 43, ;
		Name = "Label1", ;
		Top = 89, ;
		Width = 40
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Grid1.Column1.Header1' AS header WITH ;
		Caption = "PEM Editor Access", ;
		FontBold = .T., ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grid1.Column1.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1"
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'Grid1.Column2.Header1' AS header WITH ;
		Caption = "Status", ;
		FontBold = .T., ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grid1.Column2.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1"
		*< END OBJECT: BaseClass="textbox" />
	
	PROCEDURE geteditpropertymenucode
		Lparameters lcAppPath
		
		
		Local lcEditPropertyMenuCode
		
		Text To lcEditPropertyMenuCode Noshow Textmerge
		Lparameters toParameter
		
		Local llReturn
		
		Try
			If 'O' # Vartype (_oPEMEditor)
				Release _oPEMEditor
				Public 	_oPEMEditor
		
				loPEMEditor = Createobject('PEMEditor')
				_oPEMEditor = loPEMEditor.Start()
			Endif
			_oPEMEditor.oUtils.ShowForm()
			llReturn = .T.
		Catch
		
		Endtry
		****************************************************************
		
		
		Return llReturn
		
		
		
		Define Class PEMEditor As Session
		
			Procedure Start
				Return Newobject('PEMEditor_Main', 'PEME_Main.VCX', '<<lcAppPath>>')
			Endproc
		
		Enddefine
		Endtext
		
		Return lcEditPropertyMenuCode
		
		
	ENDPROC

	PROCEDURE getmenucontextcode
		Local lcMenuContextCode
		
		TEXT to lcMenuContextCode noshow
		LPARAMETERS toParameter
		
		LOCAL lnSelect, lcCode, llReturn, lScriptHandled
		
		TRY
			* First try FoxCode lookup for Type="M" records
			lnSelect = SELECT()
			SELECT 0
			USE (_FOXCODE) AGAIN SHARE ORDER 1
			IF SEEK('M' + PADR(UPPER(toParameter.MenuItem), LEN(ABBREV)))
				lcCode = DATA
			ENDIF
			USE
			SELECT (lnSelect)
			IF NOT EMPTY(lcCode)
				llReturn = EXECSCRIPT(lcCode, toParameter)
				lScriptHandled=.T.
			ENDIF
		
			* Handle by passing to external routine as specified in Tip field
			IF !lScriptHandled
				lcProgram = ALLTRIM(toParameter.Tip)
				IF FILE(lcProgram)
					DO (lcProgram) WITH toParameter,llReturn
				ENDIF
			ENDIF
		
			* Custom script successful so let's disable native behavior
			IF llReturn
				toParameter.ValueType = 'V'
			ENDIF
		CATCH
		ENDTRY
		
		RETURN llReturn
		
		ENDTEXT
		
		Return lcMenuContextCode
		
	ENDPROC

	PROCEDURE getmenuhitcode
		Local lcMenuHitCode
		
		Text To lcMenuHitCode Noshow
		lparameters toParameter
		local lnSelect, ;
		     lcCode, ;
		     llReturn
		try
		     lnSelect = select()
		     select 0
		     use (_foxcode) again shared order 1
		     if seek('M' + padr(upper(toParameter.MenuItem), len(ABBREV)))
		          lcCode = DATA
		     endif seek('M' ...
		     use
		     select (lnSelect)
		     if not empty(lcCode)
		          llReturn = execscript(lcCode, toParameter)
		          if llReturn
		              toParameter.ValueType = 'V'
		          endif llReturn
		     endif not empty(lcCode)
		catch
		endtry
		return llReturn
		
		Endtext
		
		Return lcMenuHitCode
		
	ENDPROC

	PROCEDURE getnewpropertymenucode
		Lparameters lcAppPath
		
		Local lcNewPropertyCode
		
		Text To lcNewPropertyCode Noshow Textmerge
		Lparameters toParameter
		
		Local llReturn, lcType
		
		Try
			If 'O' # Vartype (_oPEMEditor)
				Release _oPEMEditor
				Public 	_oPEMEditor
		
				loPEMEditor = Createobject('PEMEditor')
				_oPEMEditor = loPEMEditor.Start()
			Endif
			_oPEMEditor.oUtils.ShowForm()
			lcType = toParameter.MenuItem
			_oPEMEditor.oUtils.oPEMEditor.AddNew(lcType)
			llReturn = .T.
		Catch
		
		Endtry
		****************************************************************
		
		
		Return llReturn
		
		
		
		Define Class PEMEditor As Session
		
			Procedure Start
				Return Newobject('PEMEditor_Main', 'PEME_Main.VCX', '<<lcAppPath>>')
			Endproc
		
		Enddefine
		
		Endtext
		
		Return lcNewPropertyCode
		
	ENDPROC

	PROCEDURE getpropertywindowcontextmenucode
		****************************************************************
		* Context Menu ... Property Window
		#Define ccLOC_CM_ResetToDefault			["\<Reset to Default"]
		#Define ccLOC_CM_ZOOM					["\<Zoom..."]
		#Define ccLOC_CM_ExpressionBuilder		["Expression \<Builder..."]
		#Define ccLOC_CM_PEM_Editor				["\<PEM Editor..."]
		
		#Define ccLOC_CM_MemberData				["\<MemberData Editor..."]
		#Define ccLOC_CM_AddToFavorites			["Add to \<Favorites"]
		#Define ccLOC_CM_Help					["\<Help"]
		#Define ccLOC_CM_Remove					["Remo\<ve"]
		
		Lparameters lcAppPath
		
		
		Local lcName, lcPropertyWindowContextMenuCode, lcTextMerge
		
		Text To lcPropertyWindowContextMenuCode Noshow Textmerge
			Lparameter oParm
		
			Local lcPEM, laObjs, laDock, lnPos, lnRow, lnCol, lnDockPos, lcWin, llHandle, llProperty, llMethod, llCustom, llInherited, llReadOnly
		
			lcPEM = oParm.UserTyped
			lnDockPos = 0
		
			Dimension laObjs[1]
		
			Do Case
				Case Aselobj(laObjs) # 0
					loObject = laObjs[1]
					llHandle = .T.
				Case Aselobj(laObjs,1) # 0
					loObject = laObjs[1]
					*** This is the case we want to handle
					llHandle = .T.
				Otherwise
					loObject=_Screen
			Endcase
		
			If llHandle
		
				Local lcPoint, lnx, lny, lnBar
		
				m.lcPoint = 0h0000000000000000
		
				apiGetCursorPos_pemeditor(@m.lcPoint)
				apiScreenToClient_pemeditor(_Screen.HWnd, @m.lcPoint)
		
				m.lnx = CToBin(Substr(m.lcPoint, 1, 4), "4rs")
				m.lny = CToBin(Substr(m.lcPoint, 5, 4), "4rs")
		
				m.lnCol = ScreenPixelsToCols(m.lnx)
				m.lnRow = ScreenPixelsToRows(m.lny)
				*!* calloatti
		
				Private plReset, plZoom, plDoForm, plFavorites, plMemberEd, plExpression, plHelp, plRemove
		
				plReset			= .F.
				plZoom 			= .F.
				plExpression	= .F.
				plDoForm 		= .F.
				plFavorites 	= .F.
				plMemberEd  	= .F.
				plHelp 		 	= .F.
				plRemove	 	= .F.
		
				lnBar = 0
				Define Popup myPopup From lnRow, lnCol SHORTCUT
		
				Try
					*** See if it is user defined and whether it
					*** is a property or a method to decide how to construct the menu
					Try
						llReadOnly = Pemstatus( loObject, lcPEM, 1)
					Catch
						llReadOnly = .F.
					EndTry
					llProperty = Lower( Alltrim( Pemstatus( loObject, lcPEM, 3 ) ) ) = [property]
					llMethod = Inlist( Lower( Alltrim( Pemstatus( loObject, lcPEM, 3 ) ) ), [method], [event]  )
					llCustom = Pemstatus( loObject, lcPEM, 4 )
					llInherited = Pemstatus( loObject, lcPEM, 6 )
				Catch
					llCustom = .T.
				EndTry
		
				If not llReadonly
					lnBar = lnBar + 1
					Define Bar (lnBar) Of myPopup Prompt <<ccLOC_CM_ResetToDefault>>
					On Selection Bar (lnBar) Of myPopup plReset = .t.
		
					If llProperty
						lnBar = lnBar + 1
						Define Bar (lnBar) Of myPopup Prompt <<ccLOC_CM_ZOOM>>
						On Selection Bar (lnBar) Of myPopup plZoom = .T.
		
						lnBar = lnBar + 1
						Define Bar (lnBar) Of myPopup Prompt <<ccLOC_CM_ExpressionBuilder>>
						On Selection Bar (lnBar) Of myPopup plExpression = .T.
					EndIf
		
					If llCustom and not llInherited
						lnBar = lnBar + 1
						Define Bar (lnBar) Of myPopup Prompt <<ccLOC_CM_Remove>>
						On Selection Bar (lnBar) Of myPopup plRemove = .T.
					EndIf
		
					lnBar = lnBar + 1
					Define Bar (lnBar) Of myPopup Prompt "\-"
		
				EndIf
		
				lnBar = lnBar + 1
				Define Bar (lnBar) Of myPopup Prompt <<ccLOC_CM_PEM_Editor>>
				On Selection Bar (lnBar) Of myPopup plDoForm = .T.
		
				lnBar = lnBar + 1
				Define Bar (lnBar) Of myPopup Prompt <<ccLOC_CM_MemberData>>
				On Selection Bar (lnBar) Of myPopup plMemberEd = .T.
		
				lnBar = lnBar + 1
				Define Bar (lnBar) Of myPopup Prompt "\-"
		
				lnBar = lnBar + 1
				Define Bar (lnBar) Of myPopup Prompt <<ccLOC_CM_AddToFavorites>>
				On Selection Bar (lnBar) Of myPopup plFavorites = .T.
		
				If not llCustom
					lnBar = lnBar + 1
					Define Bar (lnBar) Of myPopup Prompt <<ccLOC_CM_Help>>
					On Selection Bar (lnBar) Of myPopup plHelp = .T.
				EndIf
		
				Activate Popup myPopup
			Endif
		
		
			Do Case
				Case plReset
					ResetToDefault (loObject, lcPEM)
					Return llHandle
		
				Case plZoom
					Release _oZoom
					Public _oZoom
					_oZoom = Newobject('ZoomDialog', 'Source\EditProperty.vcx', ;
						'<<lcAppPath>>', loObject, lcPEM )
					_oZoom.Show()
					Return llHandle
		
				Case plExpression
					ExpressionBuilder( loObject, lcPEM)
					Return llHandle
		
				Case plDoForm
					If 'O' # Vartype (_oPEMEditor)
						Release _oPEMEditor
						Public 	_oPEMEditor
						_oPEMEditor = Newobject('PEMEditor_Main', 'PEME_Main.VCX', '<<lcAppPath>>')
					Endif
		
					_oPEMEditor.oUtils.ShowForm()
					_oPEMEditor.oUtils.oPEMEditor.LocatePEM(lcPEM)
					Return llHandle
		
				Case plFavorites
					Do (_Builder) With loObject, "MemberData", 11, lcPEM
					Return llHandle
		
				Case plMemberEd
					Do (_Builder) With loObject, "MemberData", 1, lcPEM
					Return llHandle
		
				Case plHelp
					GetHelp (lcPEM)
					Return llHandle
		
				Case plRemove
					Try
						lcName = Trim(lcPEM) + '_assign'
						If PemStatus (loObject, lcName, 5)
							Removeproperty(loObject, lcName)
						Endif
						lcName = Trim(lcPEM) + '_access'
						If PemStatus (loObject, lcName, 5)
							Removeproperty(loObject, lcName)
						Endif
						Removeproperty(loObject, lcPEM)
					Catch
		
					EndTry
					Return llHandle
		
				Otherwise
					Return llHandle
		
			Endcase
		
			Function apiGetCursorPos_pemeditor
				Lparameters lpPoint
				Declare Integer GetCursorPos In win32api As apiGetCursorPos_pemeditor;
					String  @lpPoint
				Return apiGetCursorPos_pemeditor(@m.lpPoint)
			Endfunc
		
			Function apiScreenToClient_pemeditor
				Lparameters nHwnd, lpPoint
				Declare Integer ScreenToClient In win32api As apiScreenToClient_pemeditor ;
					Integer nhWnd, ;
					String  @lpPoint
				Return apiScreenToClient_pemeditor(m.nHwnd, @m.lpPoint)
			Endfunc
		
			Function ScreenPixelsToRows
				Lparameters tnPixels
				Return ScreenPixelsToFoxels(m.tnPixels, .T.)
			Endfunc
		
			Function ScreenPixelsToCols
				Lparameters tnPixels
				Return ScreenPixelsToFoxels(m.tnPixels, .F.)
			Endfunc
		
			Function ScreenPixelsToFoxels
				Lparameter tnPixels, tlVertical
		
				Local lnFoxels, lcFontStyle
				m.lcFontStyle = ""
		
				If _Screen.FontBold = .T. Then
					m.lcFontStyle = m.lcFontStyle + "B"
				Endif
		
				If _Screen.FontItalic = .T. Then
					m.lcFontStyle = m.lcFontStyle + "I"
				Endif
		
				m.lnFoxels = m.tnPixels/Fontmetric(Iif(m.tlVertical, 1, 6), _Screen.FontName, _Screen.FontSize, m.lcFontStyle)
		
				Return m.lnFoxels
			EndFunc
		
			****************************************************************
			Procedure ResetToDefault
		
				****************************************************************
				********************************************************************
				*** Name.....: Reset2Default
				*** Author...: Marcia G. Akins
				*** Date.....: 05/13/2007
				*** Notice...: Copyright (c) 2007 Tightline Computers, Inc
				*** Compiler.: Visual FoxPro 09.00.0000.3504 for Windows
				*** Function.: Call the resetToDefault method of all the selected objects
				*** Returns..: Logical
				********************************************************************
				Lparameters toObject, tcPEM
				Local lnSelected, laSelected[ 1 ], lnI
		
				*** Issue a resetToDefault() for all the selected objects
				lnSelected = Aselobj( laSelected )
				If lnSelected > 0
					For lnI = 1 To lnSelected
						laSelected[ lnI ].ResetToDefault( tcPEM )
					Endfor
				Else
					toObject.ResetToDefault( tcPEM )
				Endif
		
			Endproc
		
		
			****************************************************************
			Procedure ExpressionBuilder( loObject, lcPEM)
				Local lcExpression, lcNewExpression, loException
		
				lcExpression = Substr( loObject.ReadExpression(lcPEM), 2)
		
				Getexpr (lcPEM) To lcNewExpression Default (lcExpression)
		
				Try
					loObject.WriteExpression(lcPEM, lcNewExpression)
				Catch To loException
		
				Endtry
		
			Endproc
		
			****************************************************************
		
			Procedure GetHelp(lcPEM)
				Help &lcPEM
			Endproc
		
		Endtext
		
		Return lcPropertyWindowContextMenuCode
		
		
	ENDPROC

	PROCEDURE Init
		Lparameters loFoxCode
		
		This.oFoxCode = loFoxCode
		This.UpdateStatus()
		
	ENDPROC

	PROCEDURE installitem
		This.oFoxCode.AddItem(Type, abbrev, Data)
		This.oFoxCode.AddItem('S', 'MENUCONTEXT', This.cMenuContextCode)
		This.oFoxCode.AddItem('S', 'MENUHIT', This.cMenuHitCode)
		
		This.UpdateStatus()
		
	ENDPROC

	PROCEDURE Load
		* Set up the environment.
		
		Local lcAppPath, lcCode, loThorInfo
		Set Deleted On
		Set Exact Off
		Set Exclusive Off
		Set Multilocks On
		Set Safety Off
		Set Talk Off
		Sys(3054, 0)
		
		Create Cursor crsr_Browse (Descript C(40), Type C(1), Abbrev C(24), Data M, Status N(2), cStatus C(60))
		
		loThorInfo = Execscript(_Screen.cThorDispatcher, "ToolInfo=", 'Thor_Tool_PEME_LaunchPEMEditor')
		lcAppPath  = loThorInfo.FullAppName       
		
		lcCode = This.GetNewPropertyMenuCode(lcAppPath)
		Insert Into crsr_Browse Values	;
			('New Property', 'M', 'NEW PROPERTY...', lcCode, 0, '')
		
		lcCode = This.GetNewPropertyMenuCode(lcAppPath)
		Insert Into crsr_Browse Values	;
			('New Method', 'M', 'NEW METHOD...', lcCode, 0, '')
		
		lcCode = This.GetEditPropertyMenuCode(lcAppPath)
		Insert Into crsr_Browse Values	;
			('Edit Property/Method...', 'M', 'EDIT PROPERTY/METHOD...', lcCode, 0, '')
		
		lcCode = This.GetPropertyWindowContextMenuCode(lcAppPath)
		Insert Into crsr_Browse Values	;
			('Context menu in Property Sheet', 'M', '24460', lcCode, 0, '')
		
		This.cMenuContextCode = This.GetMenuContextCode()
		
		This.cMenuHitCode = This.GetMenuHitCode()
	ENDPROC

	PROCEDURE uninstallitem
		This.oFoxCode.RemoveItem(Type, abbrev, Data)
		This.UpdateStatus()
		
	ENDPROC

	PROCEDURE updatestatus		&& Triggers a change of information in the user interface elements provided by DoStatus.
		Replace All Status With This.oFoxCode.GetStatus(Type, abbrev, Data)
		Replace All cStatus With Icase(							   ;
					Status = 1, 'VFP Default',					   ;
					Status = 2, 'PEM Editor installed',			   ;
					Status = 3, 'PEM Editor installed in different folder',  ;
					'Other app installed')
		Goto Top
		
	ENDPROC

	PROCEDURE Grid1.ColInstall.Command1.Click
		Thisform.InstallItem()
		
	ENDPROC

	PROCEDURE Grid1.ColRemove.Command1.Click
		Thisform.UnInstallItem()
		
	ENDPROC

ENDDEFINE
